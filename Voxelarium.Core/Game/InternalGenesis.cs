using System;
using System.Drawing;
using Voxelarium.Core.Types;
using Voxelarium.Core.Voxels.Types;
using Voxelarium.Core.Voxels.Utils;

namespace Voxelarium.Core.Voxels
{
	public class Genesis : IWorldGenesis
	{
		const int Z_GENESISMAP_SIZE = 128;
		// static ushort ZoneMap[32][32];
		// static int  HeightMap[32][32];
		const int InclusionQuantity = 75;
		const int BlackWoods_Level = -14;

		ushort[] ConvCN = new ushort[256];

		LightSpeedRandom RandomGen;
		SaltyRandomGenerator SaltyRandomGen;
		VoxelTypeManager voxelTypeManager;

		public Bitmap Template_1;
		public Bitmap Template_2;
		public Bitmap Template_3_1;
		public Bitmap Template_3_2;
		public Bitmap Template_3_3;


		GenericCharCanvas Canva_1 = new GenericCharCanvas();
		GenericCharCanvas Canva_2 = new GenericCharCanvas();
		GenericCharCanvas Canva_3_1 = new GenericCharCanvas();
		GenericCharCanvas Canva_3_2 = new GenericCharCanvas();
		GenericCharCanvas Canva_3_3 = new GenericCharCanvas();

		VoxelSector T3dTemplate_1 = new VoxelSector( (VoxelWorld)null ); // Tree
		VoxelSector T3dTemplate_2 = new VoxelSector( (VoxelWorld)null ); // Boulder 1
		VoxelSector Template_Vegetation_1 = new VoxelSector( (VoxelWorld)null );
		VoxelSector Template_Vegetation_2 = new VoxelSector( (VoxelWorld)null );
		VoxelSector Template_Vegetation_3 = new VoxelSector( (VoxelWorld)null );
		VoxelSector[] TreeTable = new VoxelSector[16];

		string[] ZoneMap_New =
{
//                                                                                                    11111111111111111111111111111
//          11111111112222222222333333333344444444445555555555666666666677777777778888888888999999999900000000001111111111222222222
// 12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 1
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 2
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 3
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 4
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 5
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 6
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 7
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 8
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 9
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 10
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 11
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 12
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 13
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 14
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 15
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 16
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 17
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 18
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 19
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 20
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 21
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 22
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 23
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 24
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 25
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 26
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 27
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 28
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 29
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB0000000000000000000000000000000000000000000000000000000000000000000000BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 30
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB0000000000000000000000000000000000000000000000000000000000000000000000BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 31
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 32
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 33
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 34
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 35
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 36
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 37
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 38
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 39
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 40
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 41
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 42
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAABBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 43
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAB999999999999999999999999999999999999999999BAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 44
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAB999999999999999999999999999999999999999999BAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 45
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAB999999999999999999999999999999999999999999BAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 46
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAB999999999999999999999999999999999999999999BAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 47
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAB9999CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC9999BAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 48
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAB9999C66666666666666666666666666666666C9999BAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 49
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAB9999C66666666666666666666666666666666C9999BAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 50
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAB9999C66666666666666666666666666666666C9999BAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 51
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAB9999C66666666666666666666666666666666C9999BAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 52
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAB9999C66666666666666666666666666666666C9999BAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 53
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAB9999C66666666666666666666666666666666C9999BAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 54
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAB9999C66666633333333333333333333666666C9999BAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 55
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAB9999C66666632222222222222222223666666C9999BAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 56
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAB9999C66666632000000000000000023666666C9999BAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 57
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAB9999C666666320EEEEEEEEEEEEEE023666666C9999BAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 58
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAB9999C666666320EEEEEEEEEEEEEE023666666C9999BAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 59
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAB9999C666666320EE8888888888EE023666666C9999BAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 60
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAB9999C666666320EE8555555558EE023666666C9999BAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 61
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAB9999C666666320EE8577777758EE023666666C9999BAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 62
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAB9999C666666320EE857AAAA758EE023666666C9999BAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 63
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAB9999C666666320EE857A00A758EE023666666C9999BAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 64
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAB9999C666666320EE857A00A758EE023666666C9999BAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 65
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAB9999C666666320EE857AAAA758EE023666666C9999BAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 66
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAB9999C666666320EE8577777758EE023666666C9999BAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 67
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAB9999C666666320EE8555555558EE023666666C9999BAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 68
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAB9999C666666320EE8888888888EE023666666C9999BAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 69
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAB9999C666666320EEEEEEEEEEEEEE023666666C9999BAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 70
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAB9999C666666320EEEEEEEEEEEEEE023666666C9999BAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 71
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAB9999C66666632000000000000000023666666C9999BAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 72
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAB9999C66666632222222222222222223666666C9999BAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 73
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAB9999C66666633333333333333333333666666C9999BAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 74
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAB9999C66666666666666666666666666666666C9999BAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 75
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAB9999C66666666666666666666666666666666C9999BAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 76
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAB9999C66666666666666666666666666666666C9999BAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 77
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAB9999C66666666666666666666666666666666C9999BAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 78
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAB9999C66666666666666666666666666666666C9999BAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 79
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAB9999C66666666666666666666666666666666C9999BAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 80
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAB9999CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC9999BAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 81
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAB999999999999999999999999999999999999999999BAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 82
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAB999999999999999999999999999999999999999999BAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 83
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAB999999999999999999999999999999999999999999BAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 84
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAB999999999999999999999999999999999999999999BAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 85
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAABBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 86
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 87
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 88
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 89
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 90
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 91
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 92
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 93
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 94
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 95
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 96
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB00DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD00BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 97
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB0000000000000000000000000000000000000000000000000000000000000000000000BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 98
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB0000000000000000000000000000000000000000000000000000000000000000000000BBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 99
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 100
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 101
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 102
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 103
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 104
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 105
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 106
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 107
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 108
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 109
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 110
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 111
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 112
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 113
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 114
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 115
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 116
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 117
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 118
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 119
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 120
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 121
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 122
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 123
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 124
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 125
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 126
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 127
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"  // 128
};


		string[] RingNum =
		{
//                                                                                                    11111111111111111111111111111
//          11111111112222222222333333333344444444445555555555666666666677777777778888888888999999999900000000001111111111222222222
// 12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 1
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 2
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 3
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 4
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 5
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 6
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 7
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 8
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 9
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 10
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 11
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 12
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 13
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 14
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 15
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 16
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 17
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 18
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 19
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 20
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 21
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 22
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 23
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 24
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 25
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 26
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 27
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 28
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 29
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 30
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 31
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 32
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 33
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 34
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 35
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 36
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 37
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 38
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 39
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 40
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 41
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 42
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 43
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBABBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBABBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 44
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBABBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBABBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 45
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBABBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBABBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 46
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBABBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBABBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 47
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBABBBBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBABBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 48
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBABBBBA99999999999999999999999999999999ABBBBABBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 49
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBABBBBA99999999999999999999999999999999ABBBBABBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 50
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBABBBBA99999999999999999999999999999999ABBBBABBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 51
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBABBBBA99999999999999999999999999999999ABBBBABBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 52
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBABBBBA99999999999999999999999999999999ABBBBABBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 53
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBABBBBA99999999999999999999999999999999ABBBBABBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 54
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBABBBBA99999988888888888888888888999999ABBBBABBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 55
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBABBBBA99999987777777777777777778999999ABBBBABBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 56
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBABBBBA99999987666666666666666678999999ABBBBABBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 57
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBABBBBA99999987655555555555555678999999ABBBBABBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 58
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBABBBBA99999987655555555555555678999999ABBBBABBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 59
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBABBBBA99999987655444444444455678999999ABBBBABBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 60
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBABBBBA99999987655433333333455678999999ABBBBABBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 61
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBABBBBA99999987655432222223455678999999ABBBBABBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 62
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBABBBBA99999987655432111123455678999999ABBBBABBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 63
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBABBBBA99999987655432100123455678999999ABBBBABBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 64
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBABBBBA99999987655432100123455678999999ABBBBABBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 65
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBABBBBA99999987655432111123455678999999ABBBBABBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 66
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBABBBBA99999987655432222223455678999999ABBBBABBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 67
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBABBBBA99999987655433333333455678999999ABBBBABBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 68
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBABBBBA99999987655444444444455678999999ABBBBABBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 69
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBABBBBA99999987655555555555555678999999ABBBBABBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 70
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBABBBBA99999987655555555555555678999999ABBBBABBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 71
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBABBBBA99999987666666666666666678999999ABBBBABBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 72
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBABBBBA99999987777777777777777778999999ABBBBABBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 73
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBABBBBA99999988888888888888888888999999ABBBBABBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 74
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBABBBBA99999999999999999999999999999999ABBBBABBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 75
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBABBBBA99999999999999999999999999999999ABBBBABBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 76
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBABBBBA99999999999999999999999999999999ABBBBABBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 77
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBABBBBA99999999999999999999999999999999ABBBBABBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 78
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBABBBBA99999999999999999999999999999999ABBBBABBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 79
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBABBBBA99999999999999999999999999999999ABBBBABBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 80
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBABBBBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBABBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 81
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBABBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBABBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 82
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBABBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBABBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 83
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBABBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBABBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 84
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 85
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 86
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 87
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 88
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 89
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 90
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 91
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 92
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 93
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 94
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 95
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 96
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 97
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 98
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 99
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 100
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 101
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 102
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 103
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 104
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 105
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 106
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 107
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 108
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 109
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 110
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 111
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 112
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 113
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 114
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 115
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 116
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 117
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 118
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 119
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 120
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 121
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 122
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 123
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 124
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 125
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 126
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", // 127
  "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"  // 128
};

		// per ring offets.
		int[] ZoneYOffset =
	   {
   0,-20,0,0,0, 0, 0, -64,-80,-80,-80,-100,-81,-75,-70,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
// 0,-20,0,0,0,-64,-80,-80,-80,-100,-81,-75,-70,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

};

		string[] HeightMap_New =
		{
//                                                                                                    11111111111111111111111111111
//          11111111112222222222333333333344444444445555555555666666666677777777778888888888999999999900000000001111111111222222222
// 12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 1
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 2
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 3
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 4
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 5
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 6
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 7
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 8
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 9
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 10
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 11
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 12
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 13
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 14
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 15
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 16
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 17
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 18
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 19
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 20
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 21
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 22
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 23
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 24
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 25
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 26
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 27
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 28
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 29
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 30
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 31
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 32
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 33
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 34
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 35
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 36
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 37
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 38
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 39
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 40
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 41
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 42
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 43
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 44
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 45
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 46
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 47
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 48
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 49
  "00000000000000000000000000000000000000000000000005050505050505050505050505050505000000000000000000000000000000000000000000000000", // 50
  "00000000000000000000000000000000000000000000000000262626262626262626262626262620000000000000000000000000000000000000000000000000", // 51
  "00000000000000000000000000000000000000000000000005299999999999999999999999999925000000000000000000000000000000000000000000000000", // 52
  "00000000000000000000000000000000000000000000000000294444444444444444444444444920000000000000000000000000000000000000000000000000", // 53
  "00000000000000000000000000000000000000000000000005294111111111111111111111114925000000000000000000000000000000000000000000000000", // 54
  "00000000000000000000000000000000000000000000000000294100000000000000000000014920000000000000000000000000000000000000000000000000", // 55
  "00000000000000000000000000000000000000000000000005294100000000000000000000014925000000000000000000000000000000000000000000000000", // 56
  "00000000000000000000000000000000000000000000000000294100000000000000000000014920000000000000000000000000000000000000000000000000", // 57
  "00000000000000000000000000000000000000000000000005294100000000000000000000014925000000000000000000000000000000000000000000000000", // 58
  "00000000000000000000000000000000000000000000000000294100000000000000000000014920000000000000000000000000000000000000000000000000", // 59
  "00000000000000000000000000000000000000000000000005294100000222222222200000014925000000000000000000000000000000000000000000000000", // 60
  "00000000000000000000000000000000000000000000000000294100000288888888200000014920000000000000000000000000000000000000000000000000", // 61
  "00000000000000000000000000000000000000000000000005294100000285555558200000014925000000000000000000000000000000000000000000000000", // 62
  "00000000000000000000000000000000000000000000000000294100000285777758200000014920000000000000000000000000000000000000000000000000", // 63
  "00000000000000000000000000000000000000000000000005294100000285700758200000014925000000000000000000000000000000000000000000000000", // 64
  "00000000000000000000000000000000000000000000000000294100000285700758200000014920000000000000000000000000000000000000000000000000", // 65
  "00000000000000000000000000000000000000000000000005294100000285777758200000014925000000000000000000000000000000000000000000000000", // 66
  "00000000000000000000000000000000000000000000000000294100000285555558200000014920000000000000000000000000000000000000000000000000", // 67
  "00000000000000000000000000000000000000000000000005294100000288888888200000014925000000000000000000000000000000000000000000000000", // 68
  "00000000000000000000000000000000000000000000000000294100000222222222200000014920000000000000000000000000000000000000000000000000", // 69
  "00000000000000000000000000000000000000000000000005294100000000000000000000014925000000000000000000000000000000000000000000000000", // 70
  "00000000000000000000000000000000000000000000000000294100000000000000000000014920000000000000000000000000000000000000000000000000", // 71
  "00000000000000000000000000000000000000000000000005294100000000000000000000014925000000000000000000000000000000000000000000000000", // 72
  "00000000000000000000000000000000000000000000000000294100000000000000000000014925000000000000000000000000000000000000000000000000", // 73
  "00000000000000000000000000000000000000000000000005294100000000000000000000014920000000000000000000000000000000000000000000000000", // 74
  "00000000000000000000000000000000000000000000000000294100000000000000000000014925000000000000000000000000000000000000000000000000", // 75
  "00000000000000000000000000000000000000000000000005294111111111111111111111114925000000000000000000000000000000000000000000000000", // 76
  "00000000000000000000000000000000000000000000000000294444444444444444444444444920000000000000000000000000000000000000000000000000", // 77
  "00000000000000000000000000000000000000000000000005299999999999999999999999999925000000000000000000000000000000000000000000000000", // 78
  "00000000000000000000000000000000000000000000000000222222222222222222222222222220000000000000000000000000000000000000000000000000", // 79
  "00000000000000000000000000000000000000000000000005050505000050505050500005050505000000000000000000000000000000000000000000000000", // 80
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 81
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 82
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 83
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 84
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 85
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 86
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 87
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 88
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 89
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 90
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 91
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 92
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 93
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 94
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 95
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 96
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 97
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 98
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 99
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 100
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 101
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 102
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 103
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 104
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 105
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 106
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 107
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 108
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 109
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 110
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 111
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 112
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 113
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 114
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 115
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 116
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 117
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 118
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 119
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 120
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 121
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 122
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 123
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 124
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 125
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 126
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", // 127
  "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"  // 128
};

		int[] random_seed = new int[4];

		public Genesis()
		{
			int i;
			// char to num
			RandomGen = new LightSpeedRandom();
			RandomGen.Init();
			SaltyRandomGen = new SaltyRandomGenerator();
			SaltyRandomGen.getsalt += RandomGen_getsalt;
			for( i = 0; i < 256; i++ ) ConvCN[i] = 0;
			for( i = 0; i <= 9; i++ ) ConvCN[i + '0'] = (ushort)i;
			for( i = 0; i < 26; i++ ) ConvCN[i + 'A'] = (ushort)( 10 + i );
			for( i = 0; i < 26; i++ ) ConvCN[i + 'a'] = (ushort)( 36 + i );
		}

		private void RandomGen_getsalt( SaltyRandomGenerator.SaltData add_data_here )
		{
			add_data_here.Clear();
			add_data_here.salt_data.Add( BitConverter.GetBytes( random_seed[0] ) );
			add_data_here.salt_data.Add( BitConverter.GetBytes( random_seed[1] ) );
			add_data_here.salt_data.Add( BitConverter.GetBytes( random_seed[2] ) );
			add_data_here.salt_data.Add( BitConverter.GetBytes( random_seed[3] ) );
		}

		~Genesis()
		{

		}



		int GetZoneHeight( int x, int z, out ushort ZoneType )
		{
			int SecPos_x, SecPos_z;

			SecPos_x = x >> VoxelSector.ZVOXELBLOCSHIFT_X;
			SecPos_z = z >> VoxelSector.ZVOXELBLOCSHIFT_Z;
			int XSel = ( ( ( SecPos_x ) >> VoxelSector.ZVOXELBLOCSHIFT_X ) + 64 );
			int ZSel = ( ( ( SecPos_z ) >> VoxelSector.ZVOXELBLOCSHIFT_Z ) + 64 );

			if( ( XSel >= 0 && XSel < 128 )
				&& ( ZSel >= 0 && ZSel < 128 ) )
			{
				ZoneType = ConvCN[ZoneMap_New[XSel][ZSel]];
				switch( ZoneType )
				{
					default:
					case 2: //GenerateZone_MathStruct_1( VoxelSector, x,y,z ); break;
					case 3: //GenerateZone_RandomStickSea( VoxelSector, x,y,z ); break;
					case 0: return ( 0 ); break;
					case 1:
					case 4: //GenerateZone_BlackWoods( VoxelSector, x,y,z ); break;
					case 5:
						{
							int sx = (int)( ( SecPos_x << VoxelSector.ZVOXELBLOCSHIFT_X ) + ( x & VoxelSector.ZVOXELBLOCMASK_X ) );
							int sz = (int)( ( SecPos_z << VoxelSector.ZVOXELBLOCSHIFT_Z ) + ( z & VoxelSector.ZVOXELBLOCMASK_Z ) );
							uint rx = (uint)sx >> VoxelSector.ZVOXELBLOCSHIFT_X;
							uint rz = (uint)sz >> VoxelSector.ZVOXELBLOCSHIFT_Z;
							float Coef1 = ( sx % 16 ) * ( 1.0f / 16.0f );
							float Coef2 = ( sz % 16 ) * ( 1.0f / 16.0f );
							float P1 = ( RandomGen.GetNumber( rx ) + RandomGen.GetNumber( rz ) ) % 30;
							float P2 = ( RandomGen.GetNumber( rx + 1 ) + RandomGen.GetNumber( rz ) ) % 30;
							float P3 = ( RandomGen.GetNumber( rx ) + RandomGen.GetNumber( rz + 1 ) ) % 30;
							float P4 = ( RandomGen.GetNumber( rx + 1 ) + RandomGen.GetNumber( rz + 1 ) ) % 30;

							int height = (int)Interpolation_2d( P1, P2, P3, P4, Coef1, Coef2 ) - 15 + BlackWoods_Level;
							return ( height );
						}
						break;
					case 6:
						{
							int height;
							float P1, P2, P3, P4;

							height = (int)( GetHeightMap( x, z ) * 16 );

							int sx = (int)( ( SecPos_x << VoxelSector.ZVOXELBLOCSHIFT_X ) + ( x & VoxelSector.ZVOXELBLOCMASK_X ) );
							int sz = (int)( ( SecPos_z << VoxelSector.ZVOXELBLOCSHIFT_Z ) + ( z & VoxelSector.ZVOXELBLOCMASK_Z ) );
							uint rx = (uint)sx >> VoxelSector.ZVOXELBLOCSHIFT_X; float Coef1 = ( sx % 16 ) * ( 1.0f / 16.0f );
							uint rz = (uint)sz >> VoxelSector.ZVOXELBLOCSHIFT_Z; float Coef2 = ( sz % 16 ) * ( 1.0f / 16.0f );

							P1 = ( RandomGen.GetNumber( rx ) + RandomGen.GetNumber( rz ) ) % 30;
							P2 = ( RandomGen.GetNumber( rx + 1 ) + RandomGen.GetNumber( rz ) ) % 30;
							P3 = ( RandomGen.GetNumber( rx ) + RandomGen.GetNumber( rz + 1 ) ) % 30;
							P4 = ( RandomGen.GetNumber( rx + 1 ) + RandomGen.GetNumber( rz + 1 ) ) % 30;

							int height2 = (int)Interpolation_2d( P1 + height, P2 + height, P3 + height, P4 + height, Coef1, Coef2 ) - 15;

							if( height < 16.0 ) height2 = (int)( height2 * ( height / 16.0f ) );
							height = height2;
							return ( height );
						}
						break;
					case 13:
						{
							return ( Canva_3_1.GetPoint_Fast( 1023 - ( ( x + 512 ) & 1023 ), ( z + 512 ) & 1023 ) );
						}
						break;

				}
			}
			else
				ZoneType = 0;
			return ( 0 );
		}


		public void GenerateSector( VoxelSector VoxelSector )
		{
			int x, y, z, HeightOffset;
			ushort ZoneType, RngNum;


			x = VoxelSector.Pos_x;
			y = VoxelSector.Pos_y;
			z = VoxelSector.Pos_z;

			VoxelSector.Flag_Void_Regular = true; VoxelSector.Flag_Void_Transparent = true;

			int XSel = ( ( ( x ) >> VoxelSector.ZVOXELBLOCSHIFT_X ) + 64 );
			int ZSel = ( ( ( z ) >> VoxelSector.ZVOXELBLOCSHIFT_Z ) + 64 );

			if( ( XSel >= 0 && XSel < 128 )
				&& ( ZSel >= 0 && ZSel < 128 ) )
			{

				ZoneType = ConvCN[ZoneMap_New[XSel][ZSel]];
				VoxelSector.ZoneType = ZoneType;
				RngNum = ConvCN[RingNum[XSel][ZSel]];
				VoxelSector.RingNum = RngNum;
				HeightOffset = ZoneYOffset[RngNum];
				VoxelSector.ZoneVersion = 1; // Set the default version num to 1.
				VoxelSector.GeneratorVersion = 1; // Generator version. Updated at each world change.

				if( y > 64 ) { GenerateZone_DustField( VoxelSector, x, y, z ); return; }

				switch( ZoneType )
				{
					default:
					case 0:
						GenerateZone_Flat2( VoxelSector, HeightOffset, x, y, z );
						GenerateRTFM( VoxelSector );
						// GenerateBigTrees(VoxelSector);
						break;
					case 1: GenerateZone_NaturalMountains( VoxelSector, x, y, z ); break;
					case 2:
						GenerateZone_MathStruct_1( VoxelSector, HeightOffset, x, y, z );
						GenerateBigTrees( VoxelSector );
						break;
					case 3: GenerateZone_RandomStickSea( VoxelSector, HeightOffset, x, y, z ); break;
					case 4:
						GenerateZone_BlackWoods( VoxelSector, x, y, z );
						GenerateBigTrees( VoxelSector );
						break;
					case 5:
						GenerateZone_BlackWoods( VoxelSector, x, y, z );
						GenerateBigTrees( VoxelSector );
						GenerateAddBombs( VoxelSector, 0.002, 200, true );
						break;
					case 6:
						GenerateZone_BigMountains( VoxelSector, HeightOffset, x, y, z );
						//GenerateBigTrees(VoxelSector);
						break;
					case 7:
						GenerateZone_LavaRiver( VoxelSector );
						GenerateBigTrees( VoxelSector );
						break;
					case 8:
						GenerateZone_Flat2( VoxelSector, HeightOffset, x, y, z );
						GenerateBigTrees( VoxelSector );
						break;
					case 9:
						GenerateZone_AcidHills( VoxelSector, HeightOffset, x, y, z );
						break;
					case 10:
						GenerateZone_WaterLands( VoxelSector, HeightOffset, x, y, z );
						// GenerateBigTrees(VoxelSector);
						break;
					case 11:
						GenerateZone_WaterMountain( VoxelSector, HeightOffset, x, y, z );
						break;
					case 12:
						GenerateZone_FlatAcidResistant( VoxelSector, HeightOffset, x, y, z );
						break;
					case 13:
						GenerateZone_Generic_MappedTerrain( VoxelSector, 10, Canva_3_1, 512 ); // Main Terrain
																							   // Generate_Generic_LittleStructs( VoxelSector, &T3dTemplate_2, &Canva_3_2, 512  );
						Generate_Generic_PlaceVoxel( VoxelSector, 87, Canva_3_3, 512, 0, true ); // Water Generator
						Generate_Generic_PlaceVoxel( VoxelSector, 88, Canva_3_2, 512, 1, true ); // Water Absorber
						VoxelSector.Flag_NeedSortedRendering = true;
						break;
					case 14:
						Generate_Terrain_1536( VoxelSector, HeightOffset, x, y, z );
						AddTreeOn( VoxelSector, TreeTable, 3, 232 );
						//AddTreeOn(VoxelSector, &Template_Vegetation_1, 232);
						break;
					case 15:
						Generate_Terrain_1537( VoxelSector, HeightOffset, x, y, z );
						break;
					case 16:
						Generate_Terrain_1538( VoxelSector, HeightOffset, x, y, z );
						AddTreeOn( VoxelSector, TreeTable, 3, 232 );
						break;

				}

			}
			else { GenerateZone_WaterMountain( VoxelSector, -70, x, y, z ); }

		}

#if ALLOW_INLINE
		[MethodImpl( MethodImplOptions.AggressiveInlining )]
#endif
		float Interpolation_Lissee( float P1, float P2, float coef )
		{
			float result, inter;
			inter = (float)( 1.0 - Math.Cos( 3.141592654 * coef ) ) / 2.0f;
			result = P1 * ( 1.0f - inter ) + P2 * inter;
			return ( result );
		}

#if ALLOW_INLINE
		[MethodImpl( MethodImplOptions.AggressiveInlining )]
#endif
		float Interpolation_2d( float P1, float P2, float P3, float P4, float Coef1, float Coef2 )
		{
			float Plane1, Plane2;

			Plane1 = Interpolation_Lissee( P1, P2, Coef1 );
			Plane2 = Interpolation_Lissee( P3, P4, Coef1 );
			return Interpolation_Lissee( Plane1, Plane2, Coef2 );
		}

#if ALLOW_INLINE
		[MethodImpl( MethodImplOptions.AggressiveInlining )]
#endif
		// Tricubic interpolation.
		float Interpolation_3d( float[] P, float Coef1, float Coef2, float Coef3 )
		{
			float Plane1, Plane2;

			Plane1 = Interpolation_2d( P[0], P[1], P[2], P[3], Coef1, Coef2 );
			Plane2 = Interpolation_2d( P[4], P[5], P[6], P[7], Coef1, Coef2 );
			return Interpolation_Lissee( Plane1, Plane2, Coef3 );
		}

#if ALLOW_INLINE
		[MethodImpl( MethodImplOptions.AggressiveInlining )]
#endif
		float Interpolation_bilin_3d( float[] P, float Coef1, float Coef2, float Coef3 )
		{
			double i1, i2, i3, i4, i5, i6;
			double iCoef1, iCoef2, iCoef3;

			iCoef1 = 1.0 - Coef1;
			iCoef2 = 1.0 - Coef2;
			iCoef3 = 1.0 - Coef3;

			i1 = P[0] * iCoef1 + P[1] * Coef1;
			i2 = P[2] * iCoef1 + P[3] * Coef1;
			i3 = P[4] * iCoef1 + P[5] * Coef1;
			i4 = P[6] * iCoef1 + P[7] * Coef1;

			i5 = i1 * iCoef2 + i2 * Coef2;
			i6 = i3 * iCoef2 + i4 * Coef2;

			return (float)( i5 * iCoef3 + i6 * Coef3 );
		}

		// Zonemap Work

		double GetHeightMap( int Absolute_x, int Absolute_z )
		{
			int MapX, MapZ;
			long RemainX, RemainZ;
			double res, P1, P2, P3, P4, Inter_1, Inter_2, Coef1, Coef2;

			//Absolute_x -= 128;
			//Absolute_z -= 128;
			MapX = ( ( Absolute_x ) >> 8 ) + 64;
			MapZ = ( ( Absolute_z ) >> 8 ) + 64;
			RemainX = ( Absolute_x ) & 255;
			RemainZ = ( Absolute_z ) & 255;
			Coef1 = ( (double)RemainX ) / 255.0;
			Coef2 = ( (double)RemainZ ) / 255.0;

			P1 = (double)ConvCN[HeightMap_New[MapX][MapZ]];
			P2 = (double)ConvCN[HeightMap_New[MapX + 1][MapZ]];
			P3 = (double)ConvCN[HeightMap_New[MapX][MapZ + 1]];
			P4 = (double)ConvCN[HeightMap_New[MapX + 1][MapZ + 1]];

			Inter_1 = P1 * ( 1.0 - Coef1 ) + P2 * Coef1;
			Inter_2 = P3 * ( 1.0 - Coef1 ) + P4 * Coef1;
			res = Inter_1 * ( 1.0 - Coef2 ) + Inter_2 * Coef2;

			return ( res );
		}

		void GenerateZone_WaterMountain( VoxelSector VoxelSector, int HeightOffset, int Sector_x, int Sector_y, int Sector_z )
		{
			int x, y, z, Voxel_y, Deep;
			ushort VoxelType;
			int height;
			float P1, P2, P3, P4;
			ZVector3L SectorStart;
			byte Stencil, Stencil2;
			bool CStencil;

			SectorStart.x = ( VoxelSector.Pos_x << VoxelSector.ZVOXELBLOCSHIFT_X ) & 255;
			SectorStart.z = ( VoxelSector.Pos_z << VoxelSector.ZVOXELBLOCSHIFT_Z ) & 255;
			SectorStart.y = ( VoxelSector.Pos_y << VoxelSector.ZVOXELBLOCSHIFT_Y );

			VoxelSector.Flag_IsActiveVoxels = true;

			for( z = 0; z < VoxelSector.ZVOXELBLOCSIZE_Z; z++ )
				for( x = 0; x < VoxelSector.ZVOXELBLOCSIZE_X; x++ )
				{
					int sx = ( Sector_x << VoxelSector.ZVOXELBLOCSHIFT_X ) + x;
					int sz = ( Sector_z << VoxelSector.ZVOXELBLOCSHIFT_Z ) + z;
					uint rx = (uint)sx >> VoxelSector.ZVOXELBLOCSHIFT_X; float Coef1 = ( sx % 16 ) * ( 1.0f / 16.0f );
					uint rz = (uint)sz >> VoxelSector.ZVOXELBLOCSHIFT_Z; float Coef2 = ( sz % 16 ) * ( 1.0f / 16.0f );

					P1 = ( RandomGen.GetNumber( rx ) + RandomGen.GetNumber( rz ) ) % 60;
					P2 = ( RandomGen.GetNumber( rx + 1 ) + RandomGen.GetNumber( rz ) ) % 60;
					P3 = ( RandomGen.GetNumber( rx ) + RandomGen.GetNumber( rz + 1 ) ) % 60;
					P4 = ( RandomGen.GetNumber( rx + 1 ) + RandomGen.GetNumber( rz + 1 ) ) % 60;

					height = (int)Interpolation_2d( P1, P2, P3, P4, Coef1, Coef2 ) - 15;

					// height = (RandomGen.GetNumber(sx) + RandomGen.GetNumber(sz) ) % 15;

					Stencil = Canva_1.GetPoint_Fast( SectorStart.x + x, SectorStart.z + z );
					Stencil2 = Canva_2.GetPoint_Fast( SectorStart.x + x, SectorStart.z + z );
					CStencil = ( Stencil > 0 ) || ( Stencil2 < 1 );

					for( y = 0, Voxel_y = ( Sector_y << VoxelSector.ZVOXELBLOCSHIFT_Y ) - HeightOffset; y < VoxelSector.ZVOXELBLOCSIZE_Y; y++, Voxel_y++ )
					{

						Deep = Voxel_y - height + ( ( CStencil ) ? 15 : 0 );
						VoxelType = 0;

						if( Deep >= 0 )
						{
							VoxelType = 0;
						}
						else
						{
							if( CStencil ) VoxelType = 10;
							else VoxelType = 3;
						}

						VoxelSector.SetCube( x, y, z, VoxelType );
					}
				}
		}

		void GenerateZone_WaterLands( VoxelSector VoxelSector, int HeightOffset, int Sector_x, int Sector_y, int Sector_z )
		{
			int x, y, z, Voxel_y, Deep, Deep2;
			ushort VoxelType;
			int height;
			float P1, P2, P3, P4;
			// ZGenericByteCanva Canva;
			ZVector3L SectorStart;
			byte Stencil;
			//ZLineCoords LineCoords;

			SectorStart.x = ( VoxelSector.Pos_x << VoxelSector.ZVOXELBLOCSHIFT_X ) & 255;
			SectorStart.z = ( VoxelSector.Pos_z << VoxelSector.ZVOXELBLOCSHIFT_Z ) & 255;
			SectorStart.y = ( VoxelSector.Pos_y << VoxelSector.ZVOXELBLOCSHIFT_Y );

			VoxelSector.Flag_IsActiveVoxels = true;


			for( z = 0; z < VoxelSector.ZVOXELBLOCSIZE_Z; z++ )
				for( x = 0; x < VoxelSector.ZVOXELBLOCSIZE_X; x++ )
				{
					int sx = ( Sector_x << VoxelSector.ZVOXELBLOCSHIFT_X ) + x;
					int sz = ( Sector_z << VoxelSector.ZVOXELBLOCSHIFT_Z ) + z;
					uint rx = (uint)sx >> VoxelSector.ZVOXELBLOCSHIFT_X; float Coef1 = ( sx % VoxelSector.ZVOXELBLOCSIZE_X ) * ( 1.0f / 16.0f );
					uint rz = (uint)sz >> VoxelSector.ZVOXELBLOCSHIFT_Y; float Coef2 = ( sz % VoxelSector.ZVOXELBLOCSIZE_Z ) * ( 1.0f / 16.0f );

					P1 = ( RandomGen.GetNumber( rx ) + RandomGen.GetNumber( rz ) ) % 30;
					P2 = ( RandomGen.GetNumber( rx + 1 ) + RandomGen.GetNumber( rz ) ) % 30;
					P3 = ( RandomGen.GetNumber( rx ) + RandomGen.GetNumber( rz + 1 ) ) % 30;
					P4 = ( RandomGen.GetNumber( rx + 1 ) + RandomGen.GetNumber( rz + 1 ) ) % 30;

					height = (int)Interpolation_2d( P1, P2, P3, P4, Coef1, Coef2 ) - 15 + HeightOffset;

					// height = (RandomGen.GetNumber(sx) + RandomGen.GetNumber(sz) ) % 15;

					Stencil = Canva_1.GetPoint_Fast( SectorStart.x + x, SectorStart.z + z );

					for( y = 0, Voxel_y = Sector_y << VoxelSector.ZVOXELBLOCSHIFT_Y; y < VoxelSector.ZVOXELBLOCSIZE_Y; y++, Voxel_y++ )
					{
						Deep = Voxel_y - height;
						Deep2 = Voxel_y - HeightOffset;

						VoxelType = 0;

						if( Deep >= 0 )
						{
							if( Deep2 > 0 ) VoxelType = 0;
							else VoxelType = 0;
						}
						else VoxelType = 10;

						if( Stencil == 0 )
						{
							if( Deep2 < -10 && Deep2 >= -20 ) VoxelType = 85;//86;
							else if( Deep2 < -20 ) VoxelType = 10;
							else VoxelType = 0;
						}

						VoxelSector.SetCube( x, y, z, VoxelType );
					}
				}
		}

		void GenerateZone_AcidHills( VoxelSector VoxelSector, int HeightOffset, int Sector_x, int Sector_y, int Sector_z )
		{
			int x, y, z, Voxel_y, Deep;
			ushort VoxelType;
			int height;
			float P1, P2, P3, P4;
			//  ZGenericByteCanva Canva;
			ZVector3L SectorStart;
			byte Stencil;
			//  ZLineCoords LineCoords;


			SectorStart.x = ( VoxelSector.Pos_x << VoxelSector.ZVOXELBLOCSHIFT_X ) & 255;
			SectorStart.z = ( VoxelSector.Pos_z << VoxelSector.ZVOXELBLOCSHIFT_Z ) & 255;
			SectorStart.y = ( VoxelSector.Pos_y << VoxelSector.ZVOXELBLOCSHIFT_Y );

			VoxelSector.Flag_IsActiveVoxels = true;

			for( z = 0; z < VoxelSector.ZVOXELBLOCSIZE_Z; z++ )
				for( x = 0; x < VoxelSector.ZVOXELBLOCSIZE_X; x++ )
				{
					int sx = ( Sector_x << VoxelSector.ZVOXELBLOCSHIFT_X ) + x;
					int sz = ( Sector_z << VoxelSector.ZVOXELBLOCSHIFT_Z ) + z;
					uint rx = (uint)sx >> VoxelSector.ZVOXELBLOCSHIFT_X; float Coef1 = ( sx % 16 ) * ( 1.0f / 16.0f );
					uint rz = (uint)sz >> VoxelSector.ZVOXELBLOCSHIFT_Z; float Coef2 = ( sz % 16 ) * ( 1.0f / 16.0f );

					P1 = ( RandomGen.GetNumber( rx ) + RandomGen.GetNumber( rz ) ) % 30;
					P2 = ( RandomGen.GetNumber( rx + 1 ) + RandomGen.GetNumber( rz ) ) % 30;
					P3 = ( RandomGen.GetNumber( rx ) + RandomGen.GetNumber( rz + 1 ) ) % 30;
					P4 = ( RandomGen.GetNumber( rx + 1 ) + RandomGen.GetNumber( rz + 1 ) ) % 30;

					height = (int)Interpolation_2d( P1, P2, P3, P4, Coef1, Coef2 ) - 15;

					// height = (RandomGen.GetNumber(sx) + RandomGen.GetNumber(sz) ) % 15;

					Stencil = Canva_1.GetPoint_Fast( SectorStart.x + x, SectorStart.z + z );

					for( y = 0, Voxel_y = ( Sector_y << VoxelSector.ZVOXELBLOCSHIFT_Y ) - HeightOffset; y < VoxelSector.ZVOXELBLOCSIZE_Y; y++, Voxel_y++ )
					{
						Deep = Voxel_y - height;
						VoxelType = 0;

						if( Deep >= 0 )
						{
							if( Voxel_y > 0 ) VoxelType = 0;
							else VoxelType = 0;
						}
						else VoxelType = 10;

						if( Stencil == 0 )
						{
							if( Voxel_y < -10 && Voxel_y >= -20 ) VoxelType = 86;//86;
							else if( Voxel_y < -20 ) VoxelType = 10;
							else VoxelType = 0;
						}

						VoxelSector.SetCube( x, y, z, VoxelType );
					}
				}
		}



		void GenerateZone_LavaRiver( VoxelSector VoxelSector )
		{
			ZVector3L Zone, SectorStart;
			GenericCharCanvas RiverCanva = new GenericCharCanvas();
			int x, y, z;
			byte Draw;
			int Depth;
			ushort VoxelType;

			int RiverSize = 48;
			int RiverDepth = 64;


			RiverCanva.SetSize( 256, 256 );
			Zone.x = ( VoxelSector.Pos_x >> ( 8 - VoxelSector.ZVOXELBLOCSHIFT_X ) ) + ( Z_GENESISMAP_SIZE >> 1 );
			Zone.z = ( VoxelSector.Pos_z >> ( 8 - VoxelSector.ZVOXELBLOCSHIFT_Z ) ) + ( Z_GENESISMAP_SIZE >> 1 );

			SectorStart.x = ( VoxelSector.Pos_x << VoxelSector.ZVOXELBLOCSHIFT_X ) & 255;
			SectorStart.z = ( VoxelSector.Pos_z << VoxelSector.ZVOXELBLOCSHIFT_Z ) & 255;
			SectorStart.y = ( VoxelSector.Pos_y << VoxelSector.ZVOXELBLOCSHIFT_Y );

			RiverCanva.Clear();

			if( ConvCN[ZoneMap_New[Zone.x - 1][Zone.z]] == 7 ) RiverCanva.DrawBox( 0, 128 - RiverSize / 2, 127, 128 + RiverSize / 2, 1 );
			if( ConvCN[ZoneMap_New[Zone.x + 1][Zone.z]] == 7 ) RiverCanva.DrawBox( 128, 128 - RiverSize / 2, 255, 128 + RiverSize / 2, 1 );
			if( ConvCN[ZoneMap_New[Zone.x][Zone.z - 1]] == 7 ) RiverCanva.DrawBox( 128 - RiverSize / 2, 0, 128 + RiverSize / 2, 127, 1 );
			if( ConvCN[ZoneMap_New[Zone.x][Zone.z + 1]] == 7 ) RiverCanva.DrawBox( 128 - RiverSize / 2, 128, 128 + RiverSize / 2, 255, 1 );
			RiverCanva.DrawCircleFilled( 128, 128, (float)( (double)RiverSize ) / 2.0f, 1, 1.0f );

			//RiverCanva.DebugDump();
			for( x = 0; x < VoxelSector.ZVOXELBLOCSIZE_X; x++ )
			{
				for( z = 0; z < VoxelSector.ZVOXELBLOCSIZE_Z; z++ )
				{
					Draw = RiverCanva.GetPoint_Fast( SectorStart.x + x, SectorStart.z + z );
					for( y = 0; y < VoxelSector.ZVOXELBLOCSIZE_Y; y++ )
					{
						Depth = SectorStart.y + y;

						VoxelType = 0;
						if( Draw > 0 )
						{
							if( Depth < ( -RiverDepth ) ) VoxelType = 52;
						}
						else if( Depth < 0 ) VoxelType = 3;
						VoxelSector.SetCube( x, y, z, VoxelType );
					}
				}

			}

		}

		void GenerateZone_BigMountains( VoxelSector VoxelSector, int HeightOffset, int Sector_x, int Sector_y, int Sector_z )
		{
			int x, y, z, Voxel_y, Deep;
			ushort VoxelType;
			int height, height2, sx, sz;

			sx = Sector_x << VoxelSector.ZVOXELBLOCSHIFT_X;
			sz = Sector_z << VoxelSector.ZVOXELBLOCSHIFT_Z;

			for( z = 0; z < VoxelSector.ZVOXELBLOCSIZE_Z; z++ )
				for( x = 0; x < VoxelSector.ZVOXELBLOCSIZE_X; x++ )
				{
					// Linear altitude augmentation

					height = (int)GetHeightMap( sx + x, sz + z ) * 100;

					// Chaotic relief
					sx = ( Sector_x << VoxelSector.ZVOXELBLOCSHIFT_X ) + x;
					sz = ( Sector_z << VoxelSector.ZVOXELBLOCSHIFT_Z ) + z;
					uint rx = (uint)sx >> VoxelSector.ZVOXELBLOCSHIFT_X;
					uint rz = (uint)sz >> VoxelSector.ZVOXELBLOCSHIFT_Z;
					float Coef1 = ( sx % 16 ) * ( 1.0f / 16.0f );
					float Coef2 = ( sz % 16 ) * ( 1.0f / 16.0f );
					float P1, P2, P3, P4;
					P1 = ( RandomGen.GetNumber( rx ) + RandomGen.GetNumber( rz ) ) % 30;
					P2 = ( RandomGen.GetNumber( rx + 1 ) + RandomGen.GetNumber( rz ) ) % 30;
					P3 = ( RandomGen.GetNumber( rx ) + RandomGen.GetNumber( rz + 1 ) ) % 30;
					P4 = ( RandomGen.GetNumber( rx + 1 ) + RandomGen.GetNumber( rz + 1 ) ) % 30;

					height2 = (int)Interpolation_2d( P1 + height, P2 + height, P3 + height, P4 + height, Coef1, Coef2 ) - 15;

					if( height < 16.0 ) height2 = (int)( height2 * ( (float)height / 16.0f ) );


					height = height2 + HeightOffset;


					// height = (RandomGen.GetNumber(sx) + RandomGen.GetNumber(sz) ) % 15;

					for( y = 0, Voxel_y = Sector_y << VoxelSector.ZVOXELBLOCSHIFT_Y; y < VoxelSector.ZVOXELBLOCSIZE_Y; y++, Voxel_y++ )
					{
						Deep = Voxel_y - height;
						VoxelType = 0;

						if( Deep >= 0 ) VoxelType = 0;
						else VoxelType = 54;

						VoxelSector.SetCube( x, y, z, VoxelType );
					}
				}
		}

		void GenerateZone_BlackWoods( VoxelSector VoxelSector, int Sector_x, int Sector_y, int Sector_z )
		{
			int x, y, z, Voxel_y, Deep;
			ushort VoxelType;
			int height;
			float P1, P2, P3, P4;

			for( z = 0; z < VoxelSector.ZVOXELBLOCSIZE_Z; z++ )
				for( x = 0; x < VoxelSector.ZVOXELBLOCSIZE_X; x++ )
				{
					int sx = ( Sector_x << VoxelSector.ZVOXELBLOCSHIFT_X ) + x;
					int sz = ( Sector_z << VoxelSector.ZVOXELBLOCSHIFT_Z ) + z;
					uint rx = (uint)sx >> VoxelSector.ZVOXELBLOCSHIFT_X;
					uint rz = (uint)sz >> VoxelSector.ZVOXELBLOCSHIFT_Z;
					float Coef1 = ( sx % 16 ) * ( 1.0f / 16.0f );
					float Coef2 = ( sz % 16 ) * ( 1.0f / 16.0f );

					P1 = ( RandomGen.GetNumber( rx ) + RandomGen.GetNumber( rz ) ) % 30;
					P2 = ( RandomGen.GetNumber( rx + 1 ) + RandomGen.GetNumber( rz ) ) % 30;
					P3 = ( RandomGen.GetNumber( rx ) + RandomGen.GetNumber( rz + 1 ) ) % 30;
					P4 = ( RandomGen.GetNumber( rx + 1 ) + RandomGen.GetNumber( rz + 1 ) ) % 30;

					height = (int)Interpolation_2d( P1, P2, P3, P4, Coef1, Coef2 ) - 15 + BlackWoods_Level;

					// height = (RandomGen.GetNumber(sx) + RandomGen.GetNumber(sz) ) % 15;

					for( y = 0, Voxel_y = Sector_y << VoxelSector.ZVOXELBLOCSHIFT_Y; y < VoxelSector.ZVOXELBLOCSIZE_Y; y++, Voxel_y++ )
					{
						Deep = Voxel_y - height;
						VoxelType = 0;

						if( Deep >= 0 ) VoxelType = 0;
						else VoxelType = 66;

						VoxelSector.SetCube( x, y, z, VoxelType );
					}
				}
		}



		void AddTreeOn( VoxelSector Sector, VoxelSector[] TemplateTable, uint ModelCount, ushort VoxelType )
		{
			int x, y, z, i;
			uint Rnd;
			VoxelSector Template;
			ZVector3L Pos;
			i = 0;

			for( z = 0; z < VoxelSector.ZVOXELBLOCSIZE_Z; z++ )
				for( x = 0; x < VoxelSector.ZVOXELBLOCSIZE_X; x++ )
					for( y = 0; y < VoxelSector.ZVOXELBLOCSIZE_Y; y++ )
					{
						Rnd = RandomGen.GetNumber( (uint)i );
						if( Sector.Data.Data[i] == VoxelType && y < 60 && ( Rnd < 200000000 ) ) //100000000
						{
							if( Sector.Data.Data[i + 1] == 0 )
							{
								Template = TemplateTable[Rnd % ModelCount];
								Pos.x = x - Template.Handle_x; Pos.y = y + 1 - Template.Handle_y; Pos.z = z - Template.Handle_z;
								//Sector.SetCube(Pos.x,Pos.y+1,Pos.z,1);
								Sector.BlitSector( Template, ref Pos );
							}
						}

						i++;
					}

		}

		void Generate_Terrain_1536( VoxelSector VoxelSector, int HeightOffset, int Sector_x, int Sector_y, int Sector_z )
		{
			int x, y, z, nx, ny, nz;
			ushort VoxelType;
			float dns, cns, reduce, Coef1, Coef2, Coef3;
			float[] P = new float[8], C = new float[8];
			uint Rx, Ry, Rz;
			VoxelSector.Flag_NeedSortedRendering = true;

			ushort[] Textures = new ushort[16];
			Textures[0] = 232; // 1
			Textures[1] = 233; // 12
			Textures[2] = 233; // 14
							   /*
								 Textures[0] = 1; // 1
								 Textures[1] = 2; // 12
								 Textures[2] = 3; // 14
							   */
			int sx = ( ( Sector_x + 8192 ) << VoxelSector.ZVOXELBLOCSHIFT_X );
			int sy = ( ( Sector_y + 8192 ) << VoxelSector.ZVOXELBLOCSHIFT_Y );
			int sz = ( ( Sector_z + 8192 ) << VoxelSector.ZVOXELBLOCSHIFT_Z );

			for( z = 0; z < VoxelSector.ZVOXELBLOCSIZE_Z; z++ )
				for( x = 0; x < VoxelSector.ZVOXELBLOCSIZE_X; x++ )
					for( y = 0; y < VoxelSector.ZVOXELBLOCSIZE_Y; y++ )
					{
						nx = sx + x;
						ny = sy + y;
						nz = sz + z;

						Rx = (uint)( sx + x ) >> VoxelSector.ZVOXELBLOCSHIFT_X;
						Ry = (uint)( sy + y ) >> VoxelSector.ZVOXELBLOCSHIFT_Y;
						Rz = (uint)( sz + z ) >> VoxelSector.ZVOXELBLOCSHIFT_Z;

						P[0] = ( RandomGen.GetNumber( Rx ) + RandomGen.GetNumber( Ry ) + RandomGen.GetNumber( Rz ) ) % 30;
						P[1] = ( RandomGen.GetNumber( Rx + 1 ) + RandomGen.GetNumber( Ry ) + RandomGen.GetNumber( Rz ) ) % 30;
						P[2] = ( RandomGen.GetNumber( Rx ) + RandomGen.GetNumber( Ry ) + RandomGen.GetNumber( Rz + 1 ) ) % 30;
						P[3] = ( RandomGen.GetNumber( Rx + 1 ) + RandomGen.GetNumber( Ry ) + RandomGen.GetNumber( Rz + 1 ) ) % 30;
						P[4] = ( RandomGen.GetNumber( Rx ) + RandomGen.GetNumber( Ry + 1 ) + RandomGen.GetNumber( Rz ) ) % 30;
						P[5] = ( RandomGen.GetNumber( Rx + 1 ) + RandomGen.GetNumber( Ry + 1 ) + RandomGen.GetNumber( Rz ) ) % 30;
						P[6] = ( RandomGen.GetNumber( Rx ) + RandomGen.GetNumber( Ry + 1 ) + RandomGen.GetNumber( Rz + 1 ) ) % 30;
						P[7] = ( RandomGen.GetNumber( Rx + 1 ) + RandomGen.GetNumber( Ry + 1 ) + RandomGen.GetNumber( Rz + 1 ) ) % 30;
						Coef1 = ( ( sx + x ) % 16 ) * ( 1.0f / 16.0f );
						Coef3 = ( ( sy + y ) % 16 ) * ( 1.0f / 16.0f );
						Coef2 = ( ( sz + z ) % 16 ) * ( 1.0f / 16.0f );
						dns = Interpolation_3d( P, Coef1, Coef2, Coef3 );

						Ry = (uint)( sy + y + 1 ) >> VoxelSector.ZVOXELBLOCSHIFT_Y;
						C[0] = ( RandomGen.GetNumber( Rx ) + RandomGen.GetNumber( Ry ) + RandomGen.GetNumber( Rz ) ) % 30;
						C[1] = ( RandomGen.GetNumber( Rx + 1 ) + RandomGen.GetNumber( Ry ) + RandomGen.GetNumber( Rz ) ) % 30;
						C[2] = ( RandomGen.GetNumber( Rx ) + RandomGen.GetNumber( Ry ) + RandomGen.GetNumber( Rz + 1 ) ) % 30;
						C[3] = ( RandomGen.GetNumber( Rx + 1 ) + RandomGen.GetNumber( Ry ) + RandomGen.GetNumber( Rz + 1 ) ) % 30;
						C[4] = ( RandomGen.GetNumber( Rx ) + RandomGen.GetNumber( Ry + 1 ) + RandomGen.GetNumber( Rz ) ) % 30;
						C[5] = ( RandomGen.GetNumber( Rx + 1 ) + RandomGen.GetNumber( Ry + 1 ) + RandomGen.GetNumber( Rz ) ) % 30;
						C[6] = ( RandomGen.GetNumber( Rx ) + RandomGen.GetNumber( Ry + 1 ) + RandomGen.GetNumber( Rz + 1 ) ) % 30;
						C[7] = ( RandomGen.GetNumber( Rx + 1 ) + RandomGen.GetNumber( Ry + 1 ) + RandomGen.GetNumber( Rz + 1 ) ) % 30;

						Coef3 = ( ( sy + y + 1 ) % 16 ) * ( 1.0f / 16.0f );
						cns = Interpolation_3d( C, Coef1, Coef2, Coef3 );

						VoxelType = Textures[(uint)( ( cns / 20.0 ) )];

						// VoxelType = 32768;
						reduce = ( ( (float)( sy + y + ( -524288 + 20 ) - HeightOffset ) ) / 10.0f ); // 5.0
						if( reduce < 0.0 ) reduce = 0;
						dns -= reduce;
						cns -= reduce;
						if( dns < 15.0 ) { dns = 0; VoxelType = 0; } //15.0
						else
						{
							if( ( dns - cns ) > 0.3 ) VoxelType = Textures[0];
							else if( dns - cns < -0.2 ) VoxelType = Textures[2];
							else { VoxelType = Textures[1]; if( ( RandomGen.GetNumber( (uint)nx ) + RandomGen.GetNumber( (uint)ny ) + RandomGen.GetNumber( (uint)nz ) ) < 10000000 ) VoxelType = 46; }
						}

						// if (Sector_y > 1) VoxelType = 0;
						VoxelSector.SetCube( x, y, z, VoxelType );
					}
		}

		void GenerateZone_CuttedSinusArea( VoxelSector VoxelSector, int Sector_x, int Sector_y, int Sector_z )
		{
			int x, y, z, Voxel_y, Deep;
			ushort VoxelType;
			int height;

			for( z = 0; z < VoxelSector.ZVOXELBLOCSIZE_Z; z++ )
				for( x = 0; x < VoxelSector.ZVOXELBLOCSIZE_X; x++ )
				{
					//uint sx = (Sector_x << VoxelSector.ZVOXELBLOCSHIFT_X) + x;
					//uint sz = (Sector_z << VoxelSector.ZVOXELBLOCSHIFT_Z) + z;
					double sx = ( ( ( Sector_x & 15 ) << 4 ) + x ) % 128; //Sx and Sz range from 0 to 255
					double sz = ( ( ( Sector_z & 15 ) << 4 ) + z ) % 128;

					//if (sx > 32) sx = 0;

					height = (int)( Math.Sin( sx * ( 3.141592654 / 64.0 ) ) + Math.Sin( sz * ( 3.141592654 / 64.0 ) ) * 32.0 );

					// height = (RandomGen.GetNumber(sx) + RandomGen.GetNumber(sz) ) % 15;

					for( y = 0, Voxel_y = Sector_y << VoxelSector.ZVOXELBLOCSHIFT_Y; y < VoxelSector.ZVOXELBLOCSIZE_Y; y++, Voxel_y++ )
					{
						Deep = Voxel_y - height;
						VoxelType = 0;

						if( Deep >= 0 ) VoxelType = 0;
						else VoxelType = 48;

						/*
								if      (Deep >=0 )    {VoxelType = 0; }
								else if (Deep < -1536) {VoxelType = 43;}
								else if (Deep < -1280) {VoxelType = 10;}
								else if (Deep < -1024) {VoxelType = 5; }
								else if (Deep < -768)  {VoxelType = 4; }
								else if (Deep < -512)  {VoxelType = 6; }
								else if (Deep < -256)  {VoxelType = 7; }
								else if (Deep < -128)  {VoxelType = 2; }
								else if (Deep < -32)   {VoxelType = 3; }
								else if (Deep < 0)     {VoxelType = 1; }
								else                    VoxelType = 0;
						*/


						VoxelSector.SetCube( x, y, z, VoxelType );
					}
				}
		}

		void GenerateZone_PureSinusArea( VoxelSector VoxelSector, int Sector_x, int Sector_y, int Sector_z )
		{
			int x, y, z, Voxel_y, Deep;
			ushort VoxelType;
			int height;

			for( z = 0; z < VoxelSector.ZVOXELBLOCSIZE_Z; z++ )
				for( x = 0; x < VoxelSector.ZVOXELBLOCSIZE_X; x++ )
				{
					//uint sx = (Sector_x << VoxelSector.ZVOXELBLOCSHIFT_X) + x;
					//uint sz = (Sector_z << VoxelSector.ZVOXELBLOCSHIFT_Z) + z;
					double sx = ( ( ( Sector_x & 15 ) << 4 ) + x ); //Sx and Sz range from 0 to 255
					double sz = ( ( ( Sector_z & 15 ) << 4 ) + z );

					height = (int)( Math.Sin( sx * ( 3.141592654 / 32.0 ) ) * Math.Sin( sz * ( 3.14159265 / 32.0 ) ) * 32.0 );

					// height = (RandomGen.GetNumber(sx) + RandomGen.GetNumber(sz) ) % 15;

					for( y = 0, Voxel_y = Sector_y << VoxelSector.ZVOXELBLOCSHIFT_Y; y < VoxelSector.ZVOXELBLOCSIZE_Y; y++, Voxel_y++ )
					{
						Deep = Voxel_y - height;
						VoxelType = 0;

						if( Deep >= 0 ) VoxelType = 0;
						else VoxelType = 48;

						/*
								if      (Deep >=0 )    {VoxelType = 0; }
								else if (Deep < -1536) {VoxelType = 43;}
								else if (Deep < -1280) {VoxelType = 10;}
								else if (Deep < -1024) {VoxelType = 5; }
								else if (Deep < -768)  {VoxelType = 4; }
								else if (Deep < -512)  {VoxelType = 6; }
								else if (Deep < -256)  {VoxelType = 7; }
								else if (Deep < -128)  {VoxelType = 2; }
								else if (Deep < -32)   {VoxelType = 3; }
								else if (Deep < 0)     {VoxelType = 1; }
								else                    VoxelType = 0;
						*/


						VoxelSector.SetCube( x, y, z, VoxelType );
					}
				}
		}






		void GenerateZone_NaturalMountains( VoxelSector VoxelSector, int Sector_x, int Sector_y, int Sector_z )
		{
			int x, y, z, Voxel_y, Deep;
			ushort VoxelType;
			int height;
			float P1, P2, P3, P4;

			for( z = 0; z < VoxelSector.ZVOXELBLOCSIZE_Z; z++ )
				for( x = 0; x < VoxelSector.ZVOXELBLOCSIZE_X; x++ )
				{
					int sx = ( Sector_x << VoxelSector.ZVOXELBLOCSHIFT_X ) + x;
					int sz = ( Sector_z << VoxelSector.ZVOXELBLOCSHIFT_Z ) + z;
					uint rx = (uint)sx >> VoxelSector.ZVOXELBLOCSHIFT_X;
					uint rz = (uint)sz >> VoxelSector.ZVOXELBLOCSHIFT_Z;
					float Coef1 = ( sx % 16 ) * ( 1.0f / 16.0f );
					float Coef2 = ( sz % 16 ) * ( 1.0f / 16.0f );

					P1 = ( RandomGen.GetNumber( rx ) + RandomGen.GetNumber( rz ) ) % 30;
					P2 = ( RandomGen.GetNumber( rx + 1 ) + RandomGen.GetNumber( rz ) ) % 30;
					P3 = ( RandomGen.GetNumber( rx ) + RandomGen.GetNumber( rz + 1 ) ) % 30;
					P4 = ( RandomGen.GetNumber( rx + 1 ) + RandomGen.GetNumber( rz + 1 ) ) % 30;

					height = (int)Interpolation_2d( P1, P2, P3, P4, Coef1, Coef2 ) - 15;

					// height = (RandomGen.GetNumber(sx) + RandomGen.GetNumber(sz) ) % 15;

					for( y = 0, Voxel_y = Sector_y << VoxelSector.ZVOXELBLOCSHIFT_Y; y < VoxelSector.ZVOXELBLOCSIZE_Y; y++, Voxel_y++ )
					{
						Deep = Voxel_y - height;
						VoxelType = 0;

						if( Deep >= 0 ) VoxelType = 0;
						else VoxelType = 48;

						/*
								if      (Deep >=0 )    {VoxelType = 0; }
								else if (Deep < -1536) {VoxelType = 43;}
								else if (Deep < -1280) {VoxelType = 10;}
								else if (Deep < -1024) {VoxelType = 5; }
								else if (Deep < -768)  {VoxelType = 4; }
								else if (Deep < -512)  {VoxelType = 6; }
								else if (Deep < -256)  {VoxelType = 7; }
								else if (Deep < -128)  {VoxelType = 2; }
								else if (Deep < -32)   {VoxelType = 3; }
								else if (Deep < 0)     {VoxelType = 1; }
								else                    VoxelType = 0;
						*/


						VoxelSector.SetCube( x, y, z, VoxelType );
					}
				}
		}





		void GenerateZone_RandomStickSea( VoxelSector VoxelSector, int HeightOffset, int Sector_x, int Sector_y, int Sector_z )
		{
			int x, y, z, Voxel_y, Deep;
			ushort VoxelType;
			int height;

			for( z = 0; z < VoxelSector.ZVOXELBLOCSIZE_Z; z++ )
				for( x = 0; x < VoxelSector.ZVOXELBLOCSIZE_X; x++ )
				{
					float sx = ( ( ( Sector_x & 15 ) << 4 ) + x ); //Sx and Sz range from 0 to 255
					float sz = ( ( ( Sector_z & 15 ) << 4 ) + z );
					height = (int)( ( RandomGen.GetNumber( (uint)sx ) + RandomGen.GetNumber( (uint)sz ) ) % 15 ) + HeightOffset;

					for( y = 0, Voxel_y = Sector_y << VoxelSector.ZVOXELBLOCSHIFT_Y; y < VoxelSector.ZVOXELBLOCSIZE_Y; y++, Voxel_y++ )
					{
						Deep = Voxel_y - height;
						VoxelType = 0;

						if( Deep >= 0 ) VoxelType = 0;
						else VoxelType = 54;

						VoxelSector.SetCube( x, y, z, VoxelType );
					}
				}
		}



		void GenerateZone_MathStruct_1( VoxelSector VoxelSector, int HeightOffset, int Sector_x, int Sector_y, int Sector_z )
		{
			int x, y, z, Voxel_y, Deep;
			ushort VoxelType;

			for( z = 0; z < VoxelSector.ZVOXELBLOCSIZE_Z; z++ )
				for( x = 0; x < VoxelSector.ZVOXELBLOCSIZE_X; x++ )
				{
					double sx = ( ( ( Sector_x & 15 ) << 4 ) + x ); //Sx and Sz range from 0 to 255
					double sz = ( ( ( Sector_z & 15 ) << 4 ) + z );

					if( sx > 128 ) sx = 256 - sx;
					if( sz > 128 ) sz = 256 - sz;
					//uint height = sin(sx/81.487330852) * sin(sz/81.487330852) * 50 - 1 ;
					//uint height = sin(sx/81.487330852) * sin(sz/81.487330852) * ( sx * sz / 20.0 );
					//uint height = sin(sx/(81.487330852/4.0)) * sin(sz/(81.487330852/4.0)) * ( sx * sz / 20.0 );
					uint height = (uint)( Math.Sin( Math.Sin( sx / ( 81.487330852 ) ) * Math.Sin( sz / ( 81.487330852 ) ) * 50.0 ) * ( sx * sz / 100.0 ) ) + (uint)HeightOffset;


					// height = Sector_x + Sector_z;
					for( y = 0, Voxel_y = Sector_y << VoxelSector.ZVOXELBLOCSHIFT_Y; y < VoxelSector.ZVOXELBLOCSIZE_Y; y++, Voxel_y++ )
					{
						Deep = Voxel_y - (int)height;
						VoxelType = 0;

						if( Deep >= 0 ) VoxelType = 0;
						else VoxelType = 53;
						VoxelSector.SetCube( x, y, z, VoxelType );
					}
				}
		}


		void GenerateZone_Mountains( VoxelSector VoxelSector, int Sector_x, int Sector_y, int Sector_z )
		{
			int x, y, z;

			int Voxel_y, Deep;
			ushort VoxelType;
			for( z = 0; z < VoxelSector.ZVOXELBLOCSIZE_Z; z++ )
				for( x = 0; x < VoxelSector.ZVOXELBLOCSIZE_X; x++ )
				{
					int Cube_x = ( Math.Abs( Sector_x ) << VoxelSector.ZVOXELBLOCSHIFT_X ) | x;
					int Cube_z = ( Math.Abs( Sector_z ) << VoxelSector.ZVOXELBLOCSHIFT_Z ) | z;
					int F1 = Sector_x >> 2;
					int F1p = ( Sector_x + 1 ) >> 2;

					double F1_Coef = ( Cube_x & 0x3F ) / 64.0;
					int F2 = Sector_z >> 2;
					int F2p = ( Sector_z + 1 ) >> 2;
					double F2_Coef = ( Cube_z & 0x3F ) / 64.0;

					double Mult1_1 = ( (double)RandomGen.GetNumber( (uint)F1 ) ) / 42949672.0;
					double Mult1_2 = ( (double)RandomGen.GetNumber( (uint)F1p ) ) / 42949672.0;
					double Mult1 = Mult1_1 * F1_Coef + Mult1_2 * ( 1.0 - F1_Coef );

					double Mult2_1 = ( (double)RandomGen.GetNumber( (uint)F2 ) ) / 42949672.0;
					double Mult2_2 = ( (double)RandomGen.GetNumber( (uint)F2p ) ) / 42949672.0;
					double Mult2 = Mult2_1 * F2_Coef + Mult2_2 * ( 1.0 - F2_Coef );



					uint height = (uint)( Math.Sin( ( (double)x + ( Sector_x << VoxelSector.ZVOXELBLOCSHIFT_X ) ) / Mult1 ) * Math.Sin( ( (double)z + ( Sector_z << VoxelSector.ZVOXELBLOCSHIFT_Z ) ) / Mult2 ) * 25.0 );
					for( y = 0, Voxel_y = Sector_y << VoxelSector.ZVOXELBLOCSHIFT_Y; y < VoxelSector.ZVOXELBLOCSIZE_Y; y++, Voxel_y++ )
					{
						Deep = Voxel_y - (int)height;
						VoxelType = 0;

						if( Deep >= 0 ) { VoxelType = 0; }
						else if( Deep < -1536 ) { VoxelType = 43; }
						else if( Deep < -1280 ) { VoxelType = 10; }
						else if( Deep < -1024 ) { VoxelType = 5; }
						else if( Deep < -768 ) { VoxelType = 4; }
						else if( Deep < -512 ) { VoxelType = 6; }
						else if( Deep < -256 ) { VoxelType = 7; }
						else if( Deep < -128 ) { VoxelType = 2; }
						else if( Deep < -32 ) { VoxelType = 3; }
						else if( Deep < 0 ) { VoxelType = 1; }
						else VoxelType = 0;

						if( VoxelType != 0 && height > 20 ) VoxelType = 10;

						VoxelSector.SetCube( x, y, z, VoxelType );
					}
				}
		}

		void GenerateBigTrees( VoxelSector Sector )
		{
			int x, z, xs, ys, zs, GenerationRadius;
			VoxelGfx_Tree TreeMaker = new VoxelGfx_Tree();
			VoxelGfx_Tree_Straight TreeMaker_2 = new VoxelGfx_Tree_Straight();
			VoxelGfx_Tree_Giant TreeMaker_3 = new VoxelGfx_Tree_Giant();
			LightSpeedRandom Random = new LightSpeedRandom();
			//int Seed;
			ushort ZoneType = 0;
			uint RandNum, TreeType;
			bool ZoneOk;

			xs = Sector.Pos_x << VoxelSector.ZVOXELBLOCSHIFT_X;
			ys = Sector.Pos_y << VoxelSector.ZVOXELBLOCSHIFT_Y;
			zs = Sector.Pos_z << VoxelSector.ZVOXELBLOCSHIFT_Z;
			//Seed = xs + 3524*ys + 234 * zs;

			/*
			  Sector.SetCube(0,20,0, 2);
			  Sector.SetCube(15,20,15, 2);
			  return;
			*/

			GenerationRadius = 150;
			for( x = xs - GenerationRadius; x < xs + GenerationRadius; x++ )
				for( z = zs - GenerationRadius; z < zs + GenerationRadius; z++ )
				{
					if( ( RandNum = Random.GetNumber( (uint)(Math.Abs( x ) + ( Math.Abs( z ) << 8 ) )) ) < ( 4194304 / 3 ) ) // 6
					{
						ZVector3f Position;
						Position.x = x - xs;
						Position.z = z - zs;
						Position.y = GetZoneHeight( x, z, out ZoneType ) - ys;
						TreeMaker.Seed = (uint)( Math.Abs( x ) * 3 + ( ( Math.Abs( z ) << 9 ) * 5 ) );
						TreeMaker_2.Seed = TreeMaker.Seed;
						TreeType = RandNum & 7;

						ZoneOk = ( ZoneType == 5 );
						switch( TreeType )
						{
							case 0:
							case 1:
							case 2:
								if( Position.y > -128 && Position.y < 64 && ZoneOk ) TreeMaker.DrawTree( Sector, ref Position );
								break;

							case 3:
							case 4:
							case 5:
							case 6:
								if( Position.y > -192 && Position.y < 64 && ZoneOk ) TreeMaker_2.DrawTree( Sector, ref Position );
								break;
							case 7:
								if( Position.y > -1024 && Position.y < 64 && ZoneOk ) TreeMaker_3.DrawTree( Sector, ref Position );
								break;
						}
					}
				}
		}


		void GenerateZone_Flat( VoxelSector VoxelSector, int Sector_x, int Sector_y, int Sector_z )
		{
			int y, Voxel_y;
			uint i, RandomNumber;
			ushort[] TypeTable = new ushort[VoxelSector.ZVOXELBLOCSIZE_Y];
			bool[] MineralInclude = new bool[VoxelSector.ZVOXELBLOCSIZE_Y];
			ushort Type;
			ushort[] Data = VoxelSector.Data.Data;

			VoxelSector.Flag_Void_Transparent = true;
			VoxelSector.Flag_Void_Regular = true;

			SaltyRandomGen.Reset();
			random_seed[0] = Sector_x;
			random_seed[1] = Sector_y;
			random_seed[2] = Sector_z;
			random_seed[3] = 0;
			//RandomSeed = ( RandomGen.GetNumber( Sector_x & ZLIGHTSPEEDRANDOM_LENMASK ) ^ RandomGen.GetNumber( Sector_y & ZLIGHTSPEEDRANDOM_LENMASK ) ^ RandomGen.GetNumber( Sector_z & ZLIGHTSPEEDRANDOM_LENMASK ) ) & ZLIGHTSPEEDRANDOM_LENMASK;

			for( y = 0, Voxel_y = ( Sector_y << VoxelSector.ZVOXELBLOCSHIFT_Y ); y < VoxelSector.ZVOXELBLOCSIZE_Y; y++, Voxel_y++ )
			{
				Type = 0;
				if( Voxel_y >= 0 ) Type = 0;
				else if( Voxel_y < -1536 ) { Type = 43; VoxelSector.Flag_Void_Regular = false; }
				else if( Voxel_y < -1280 ) { Type = 10; VoxelSector.Flag_Void_Regular = false; }
				else if( Voxel_y < -1024 ) { Type = 5; VoxelSector.Flag_Void_Regular = false; }
				else if( Voxel_y < -768 ) { Type = 4; VoxelSector.Flag_Void_Regular = false; }
				else if( Voxel_y < -512 ) { Type = 6; VoxelSector.Flag_Void_Regular = false; }
				else if( Voxel_y < -256 ) { Type = 7; VoxelSector.Flag_Void_Regular = false; }
				else if( Voxel_y < -128 ) { Type = 2; VoxelSector.Flag_Void_Regular = false; }
				else if( Voxel_y < -32 ) { Type = 3; VoxelSector.Flag_Void_Regular = false; }
				else if( Voxel_y < 0 ) { Type = 1; VoxelSector.Flag_Void_Regular = false; }
				else Type = 0;
				TypeTable[y] = Type;

				MineralInclude[y] = ( ( Voxel_y < -1L ) && ( Type != 0 ) );
			}

			ushort LastMineral = 0;
			for( i = 0; i < ( VoxelSector.ZVOXELBLOCSIZE_X * VoxelSector.ZVOXELBLOCSIZE_Y * VoxelSector.ZVOXELBLOCSIZE_Z ); i++ )
			{
				Data[i] = TypeTable[i & VoxelSector.ZVOXELBLOCMASK_Y];
				if( MineralInclude[i & VoxelSector.ZVOXELBLOCMASK_Y] )
				{
					RandomNumber = (uint)SaltyRandomGen.GetEntropy( 10, false );

					//if (RandomNumber < 42949672UL) Data[i]=26;
					//if (RandomNumber < 4294967UL)  Data[i]=27;
					if( RandomNumber < InclusionQuantity )
					{
						switch( RandomNumber & 0xf )
						{
							case 0:
							case 1:
							case 2:
							case 3:
							case 4:
							case 5: LastMineral = 74; break; // Fer
							case 6: LastMineral = 112; break; // Cuivre
							case 7: LastMineral = 26; break; // Or
							case 8: LastMineral = 28; break; // Amethiste
							case 9: LastMineral = 109; break; // Diamond.
							case 10: LastMineral = 110; break; // Nickel
							case 11: LastMineral = 44; break; // Vitrail bleu/blanc
							case 12: LastMineral = 46; break; // Pierre vitrifiÃ©e
							case 13: LastMineral = 47; break; // Emeraude ?
							case 14: LastMineral = 60; break; // Charbon
							case 15: LastMineral = 111; break; // Uranium
						}
					}
					if( LastMineral != 0 )
					{
						switch( LastMineral )
						{
							default:
								if( ( RandomNumber & 3 ) != 0 ) Data[i] = LastMineral;
								else LastMineral = 0;
								break;
						}
					}
				}
			}

		}
















		void GenerateZone_Flat2( VoxelSector VoxelSector, int HeightOffset, int Sector_x, int Sector_y, int Sector_z )
		{
			int y, Voxel_y;
			uint i;
			ushort[] TypeTable = new ushort[VoxelSector.ZVOXELBLOCSIZE_Y];
			bool[] MineralInclude = new bool[VoxelSector.ZVOXELBLOCSIZE_Y];

			ushort Type;
			ushort[] Data = VoxelSector.Data.Data;

			VoxelSector.Flag_Void_Transparent = true;
			VoxelSector.Flag_Void_Regular = true;

			// Probabilizer

			InclusionProbabilizer Probabilizer = new InclusionProbabilizer();

			int Deepness = Sector_y;
			SaltyRandomGen.Reset();
			random_seed[0] = Sector_x;
			random_seed[1] = Sector_y;
			random_seed[2] = Sector_z;
			random_seed[3] = 0;


			switch( Deepness )
			{
				case -1:
				default:
					Probabilizer.AddEntry( 44, 0, 0.1f );   // MatÃ©riau X
					Probabilizer.AddEntry( 60, 50, 1.0f );   // Charbon
					Probabilizer.AddEntry( 112, 50, 1.0f );   // Cuivre
					Probabilizer.AddEntry( 127, 50, 0.4f );   // Etain
															  // Rare ores
					Probabilizer.AddEntry( 26, 0, 0.1f );  // Or
					Probabilizer.AddEntry( 74, 0, 0.05f ); // Fer
					break;
				case -2:
					Probabilizer.AddEntry( 26, 0, 0.1f );   // Or
					Probabilizer.AddEntry( 60, 50, 1.0f );   // Charbon
					Probabilizer.AddEntry( 74, 50, 0.1f );   // Fer
					Probabilizer.AddEntry( 110, 50, 0.2f );  // Nickel
					Probabilizer.AddEntry( 121, 50, 0.2f );  // Chrome
					break;
				case -3:
					Probabilizer.AddEntry( 26, 0, 0.1f );   // Or
					Probabilizer.AddEntry( 60, 50, 1.0f );   // Charbon
					Probabilizer.AddEntry( 74, 50, 1.0f );   // Fer
					Probabilizer.AddEntry( 110, 50, 0.5f );  // Nickel
					Probabilizer.AddEntry( 121, 50, 0.5f );  // Chrome
					Probabilizer.AddEntry( 150, 50, 0.5f );  // Plomb
					break;
				case -4:
					Probabilizer.AddEntry( 26, 0, 0.2f );   // Or
					Probabilizer.AddEntry( 27, 50, 0.05f );  // Amethyste
					Probabilizer.AddEntry( 47, 50, 0.05f );  // Emeraude
					Probabilizer.AddEntry( 60, 50, 1.0f );   // Charbon
					Probabilizer.AddEntry( 74, 50, 2.0f );   // Fer
					Probabilizer.AddEntry( 109, 50, 0.04f ); // Diamond
					Probabilizer.AddEntry( 110, 50, 1.0f );  // Nickel
					Probabilizer.AddEntry( 121, 50, 1.0f );  // Chrome
					Probabilizer.AddEntry( 122, 50, 0.05f ); // Titanium
					Probabilizer.AddEntry( 127, 50, 1.0f );   // Etain
					Probabilizer.AddEntry( 150, 50, 1.0f );  // Plomb
					break;
				case -5:
					Probabilizer.AddEntry( 26, 0, 0.2f );   // Or
					Probabilizer.AddEntry( 27, 50, 0.05f );  // Amethyste
					Probabilizer.AddEntry( 60, 50, 1.0f );   // Charbon
					Probabilizer.AddEntry( 74, 50, 2.0f );   // Fer
					Probabilizer.AddEntry( 109, 50, 0.05f ); // Diamond
					Probabilizer.AddEntry( 110, 50, 1.0f );  // Nickel
					Probabilizer.AddEntry( 121, 50, 1.0f );  // Chrome
					Probabilizer.AddEntry( 122, 50, 0.05f ); // Titanium
					Probabilizer.AddEntry( 150, 50, 1.0f );  // Plomb
					break;
				case -6:
					Probabilizer.AddEntry( 26, 0, 0.2f );   // Or
					Probabilizer.AddEntry( 27, 50, 0.05f );  // Amethyste
					Probabilizer.AddEntry( 47, 50, 0.045f ); // Emeraude
					Probabilizer.AddEntry( 60, 50, 1.0f );   // Charbon
					Probabilizer.AddEntry( 74, 50, 2.0f );   // Fer
					Probabilizer.AddEntry( 109, 50, 0.1f );  // Diamond
					Probabilizer.AddEntry( 110, 50, 1.0f );  // Nickel
					Probabilizer.AddEntry( 121, 50, 1.0f );  // Chrome
					Probabilizer.AddEntry( 122, 50, 0.05f ); // Titanium
					Probabilizer.AddEntry( 150, 50, 1.0f );  // Plomb
					break;
				case -7:
					Probabilizer.AddEntry( 26, 0, 0.2f );   // Or
					Probabilizer.AddEntry( 27, 50, 0.05f );  // Amethyste
					Probabilizer.AddEntry( 60, 50, 1.0f );   // Charbon
					Probabilizer.AddEntry( 74, 50, 2.0f );   // Fer
					Probabilizer.AddEntry( 110, 50, 1.0f );  // Nickel
					Probabilizer.AddEntry( 121, 50, 1.0f );  // Chrome
					Probabilizer.AddEntry( 122, 50, 0.05f ); // Titanium
					Probabilizer.AddEntry( 150, 50, 1.0f );  // Plomb
					break;
				case -8:
					Probabilizer.AddEntry( 26, 0, 0.2f );   // Or
					Probabilizer.AddEntry( 27, 50, 0.05f );  // Amethyste
					Probabilizer.AddEntry( 46, 50, 0.05f );  // Rose des sables
					Probabilizer.AddEntry( 60, 50, 1.0f );   // Charbon
					Probabilizer.AddEntry( 74, 50, 2.0f );   // Fer
					Probabilizer.AddEntry( 110, 50, 1.0f );  // Nickel
					Probabilizer.AddEntry( 111, 50, 0.05f ); // Uranium
					Probabilizer.AddEntry( 121, 50, 1.0f );  // Chrome
					Probabilizer.AddEntry( 122, 50, 0.05f ); // Titanium
					Probabilizer.AddEntry( 150, 50, 1.0f );  // Plomb
					break;
				case -9:
					Probabilizer.AddEntry( 26, 0, 0.2f );   // Or
					Probabilizer.AddEntry( 27, 50, 0.05f );  // Amethyste
					Probabilizer.AddEntry( 60, 50, 1.0f );   // Charbon
					Probabilizer.AddEntry( 74, 50, 2.0f );   // Fer
					Probabilizer.AddEntry( 110, 50, 1.0f );  // Nickel
					Probabilizer.AddEntry( 111, 50, 0.05f ); // Uranium
					Probabilizer.AddEntry( 121, 50, 1.0f );  // Chrome
					Probabilizer.AddEntry( 122, 50, 0.05f ); // Titanium
					Probabilizer.AddEntry( 197, 50, 1.0f );  // Aluminium Ore
					break;
				case -10:  // Water level
					Probabilizer.AddEntry( 10, 2, 15.0f );
					break;



					/*
						case -1:
						default:
								   Probabilizer.AddEntry(60, 50, 1.0);   // Charbon
								   Probabilizer.AddEntry(112,1, 1.0);   // Cuivre
								   Probabilizer.AddEntry(127,1, 0.4);   // Etain
								   Probabilizer.AddEntry( 44, 0, 0.10); // Vitrail
								   // Rare ores
								   Probabilizer.AddEntry( 74, 0, 0.05);  // Fer
								   Probabilizer.AddEntry( 26, 0, 0.1); // Or
								   break;
						case -2:

								   Probabilizer.AddEntry( 74, 50, 1.0);  // Fer
								   Probabilizer.AddEntry(60, 50, 1.0);   // Charbon
								   Probabilizer.AddEntry( 26, 0, 0.1); // Or
								   Probabilizer.AddEntry(110, 50, 0.2); // Nickel
								   Probabilizer.AddEntry(121, 50, 0.2); // Chrome
						  break;
					*/
			}

			uint FenceBound = Probabilizer.ComputeProbabilities( 1.0f );


			// Layers of ground.

			for( y = 0, Voxel_y = ( Sector_y << VoxelSector.ZVOXELBLOCSHIFT_Y ) - HeightOffset; y < VoxelSector.ZVOXELBLOCSIZE_Y; y++, Voxel_y++ )
			{
				Type = 0;
				if( Voxel_y >= 0 ) Type = 0;
				else if( Voxel_y < -2176 ) { Type = 126; VoxelSector.Flag_Void_Regular = false; } // Bleu
				else if( Voxel_y < -2043 ) { Type = 3; VoxelSector.Flag_Void_Regular = false; }   // Vert
				else if( Voxel_y < -2038 ) { Type = 52; VoxelSector.Flag_Void_Regular = false; }  // Lave
				else if( Voxel_y < -2028 ) { Type = 0; VoxelSector.Flag_Void_Regular = false; }   // Vide
				else if( Voxel_y < -1984 ) { Type = 3; VoxelSector.Flag_Void_Regular = false; }   // Vert
				else if( Voxel_y < -1856 ) { Type = 5; VoxelSector.Flag_Void_Regular = false; }   // Bleu ciel
				else if( Voxel_y < -1728 ) { Type = 2; VoxelSector.Flag_Void_Regular = false; }   // Orange
				else if( Voxel_y < -1600 ) { Type = 3; VoxelSector.Flag_Void_Regular = false; }   // Vert
				else if( Voxel_y < -1472 ) { Type = 1; VoxelSector.Flag_Void_Regular = false; }   // Bleu
				else if( Voxel_y < -1339 ) { Type = 10; VoxelSector.Flag_Void_Regular = false; }  // Blanc
				else if( Voxel_y < -1334 ) { Type = 86; VoxelSector.Flag_Void_Regular = false; VoxelSector.Flag_IsActiveVoxels = true; }  // Acide
				else if( Voxel_y < -1324 ) { Type = 0; VoxelSector.Flag_Void_Regular = false; }   // Vide
				else if( Voxel_y < -1280 ) { Type = 10; VoxelSector.Flag_Void_Regular = false; }  // Blanc
				else if( Voxel_y < -1152 ) { Type = 5; VoxelSector.Flag_Void_Regular = false; }   // Bleu ciel
				else if( Voxel_y < -1024 ) { Type = 2; VoxelSector.Flag_Void_Regular = false; }   // Orange
				else if( Voxel_y < -896 ) { Type = 1; VoxelSector.Flag_Void_Regular = false; }   // Vert
				else if( Voxel_y < -768 ) { Type = 1; VoxelSector.Flag_Void_Regular = false; }   // Bleu
				else if( Voxel_y < -635 ) { Type = 10; VoxelSector.Flag_Void_Regular = false; }  // Blanc
				else if( Voxel_y < -630 ) { Type = 85; VoxelSector.Flag_Void_Regular = false; VoxelSector.Flag_IsActiveVoxels = true; VoxelSector.Flag_NeedSortedRendering = true; }  // Eau
				else if( Voxel_y < -620 ) { Type = 0; VoxelSector.Flag_Void_Regular = false; }   // Vide
				else if( Voxel_y < -576 ) { Type = 10; VoxelSector.Flag_Void_Regular = false; }  // Blanc
				else if( Voxel_y < -512 ) { Type = 7; VoxelSector.Flag_Void_Regular = false; }   // Rose
				else if( Voxel_y < -448 ) { Type = 9; VoxelSector.Flag_Void_Regular = false; }   // Gris
				else if( Voxel_y < -384 ) { Type = 8; VoxelSector.Flag_Void_Regular = false; }   // Vert citron
				else if( Voxel_y < -320 ) { Type = 4; VoxelSector.Flag_Void_Regular = false; }   // Rouge
				else if( Voxel_y < -256 ) { Type = 6; VoxelSector.Flag_Void_Regular = false; }   // Jaune
				else if( Voxel_y < -192 ) { Type = 5; VoxelSector.Flag_Void_Regular = false; }   // Bleu ciel
				else if( Voxel_y < -128 ) { Type = 2; VoxelSector.Flag_Void_Regular = false; }   // Orange
				else if( Voxel_y < -64 ) { Type = 3; VoxelSector.Flag_Void_Regular = false; }   // Vert
				else if( Voxel_y < 0 ) { Type = 1; VoxelSector.Flag_Void_Regular = false; }   // Bleu
				else Type = 0;

				/*
				if      (Voxel_y >=0 )      Type = 0;
				else if (Voxel_y < -960)  {Type = 126; VoxelSector.Flag_Void_Regular = false;}
				else if (Voxel_y < -768)  {Type = 1; VoxelSector.Flag_Void_Regular = false;}
				else if (Voxel_y < -630)  {Type = 10; VoxelSector.Flag_Void_Regular = false;}
				else if (Voxel_y < -625)  {Type = 85; VoxelSector.Flag_Void_Regular = false;}
				else if (Voxel_y < -615)  {Type = 0; VoxelSector.Flag_Void_Regular = false;}
				else if (Voxel_y < -576)  {Type = 10; VoxelSector.Flag_Void_Regular = false;}
				else if (Voxel_y < -512)  {Type = 7; VoxelSector.Flag_Void_Regular = false;}
				else if (Voxel_y < -448)  {Type = 9; VoxelSector.Flag_Void_Regular = false;}
				else if (Voxel_y < -384)  {Type = 8; VoxelSector.Flag_Void_Regular = false; }
				else if (Voxel_y < -320)   {Type = 4; VoxelSector.Flag_Void_Regular = false; }
				else if (Voxel_y < -256)   {Type = 6; VoxelSector.Flag_Void_Regular = false; }
				else if (Voxel_y < -192)   {Type = 5; VoxelSector.Flag_Void_Regular = false; }
				else if (Voxel_y < -128)   {Type = 2; VoxelSector.Flag_Void_Regular = false; } // Orange
				else if (Voxel_y < -64)    {Type = 3; VoxelSector.Flag_Void_Regular = false; } // Vert
				else if (Voxel_y < 0)      {Type = 1; VoxelSector.Flag_Void_Regular = false; } // Bleu
				else                        Type = 0;
				*/

				TypeTable[y] = Type;

				//TypeTable[y]= 0; // debug

				MineralInclude[y] = ( ( Voxel_y < -5L ) && ( Type != 0 ) );
			}

			// If sector is void, fill it more quickly
			if( VoxelSector.Flag_Void_Regular )
			{
				for( i = 0; i < ( VoxelSector.ZVOXELBLOCSIZE_X * VoxelSector.ZVOXELBLOCSIZE_Y * VoxelSector.ZVOXELBLOCSIZE_Z ); i++ ) Data[i] = 0;
				return;
			}

			// Fill zone with inclusions

			ushort LastMineral = 0;
			uint Num = 0;

			for( i = 0; i < ( VoxelSector.ZVOXELBLOCSIZE_X * VoxelSector.ZVOXELBLOCSIZE_Y * VoxelSector.ZVOXELBLOCSIZE_Z ); i++ )
			{
				Data[i] = TypeTable[i & VoxelSector.ZVOXELBLOCMASK_Y];
				if( MineralInclude[i & VoxelSector.ZVOXELBLOCMASK_Y] )
				{
					if( Probabilizer.IsBelowFence( SaltyRandomGen ) )
					{
						Num = Probabilizer.GetTypeNum( SaltyRandomGen );
						Data[i] = LastMineral = Probabilizer.GetVoxelType( Num );
					}
					else if( LastMineral != 0 )
					{
						if( Probabilizer.AllowRepeat( Num, SaltyRandomGen ) ) Data[i] = LastMineral;
						else LastMineral = 0;
					}
					// LastMineral = 0;
				}
			}

			// if (Pos_y<0) {Cnt=1;Flag_Void_Regular=false;Flag_Void_Transparent=true;}
			// if (Pos_y>=0){Cnt=0;Flag_Void_Regular=true;Flag_Void_Transparent=true;}
			/*
			if( VoxelSector.Pos_x == 0 && VoxelSector.Pos_y == 0 && VoxelSector.Pos_z == -2 && VoxelGlobalSettings.COMPILEOPTION_ALLOWSTARTINGSTORAGE )
			{
				ZVoxelExtension_Storage* StorageExtension;

				StorageExtension = new ZVoxelExtension_Storage();
				StorageExtension.VoxelType[0] = 42; StorageExtension.VoxelQuantity[0] = 1;
				StorageExtension.VoxelType[1] = 75; StorageExtension.VoxelQuantity[1] = 1;

				VoxelSector.SetCube_WithExtension( 8, 0, 8, 49, StorageExtension );
			}
			*/
		}


		void GenerateZone_FlatAcidResistant( VoxelSector VoxelSector, int HeightOffset, int Sector_x, int Sector_y, int Sector_z )
		{
			int y, Voxel_y;
			uint i;
			ushort[] TypeTable = new ushort[VoxelSector.ZVOXELBLOCSIZE_Y];
			bool[] MineralInclude = new bool[VoxelSector.ZVOXELBLOCSIZE_Y];

			ushort Type;
			ushort[] Data = VoxelSector.Data.Data;

			VoxelSector.Flag_Void_Transparent = true;
			VoxelSector.Flag_Void_Regular = true;

			// Probabilizer

			InclusionProbabilizer Probabilizer = new InclusionProbabilizer();

			int Deepness = Sector_y;

			// Deepness = -2;

			switch( Deepness )
			{
				case -1:
				default:
					Probabilizer.AddEntry( 60, 50.0f, 1.0f );   // Charbon
					Probabilizer.AddEntry( 112, 50.0f, 1.0f );   // Cuivre
					Probabilizer.AddEntry( 127, 50.0f, 0.4f );   // Etain
					Probabilizer.AddEntry( 44, 0, 0.10f ); // Vitrail
														   // Rare ores
					Probabilizer.AddEntry( 74, 0, 0.05f );  // Fer
					Probabilizer.AddEntry( 26, 0, 0.1f ); // Or
					break;
				case -2:

					Probabilizer.AddEntry( 74, 50.0f, 1.0f );  // Fer
					Probabilizer.AddEntry( 60, 50.0f, 1.0f );   // Charbon
					Probabilizer.AddEntry( 26, 0, 0.1f ); // Or
					Probabilizer.AddEntry( 110, 50.0f, 0.2f ); // Nickel
					Probabilizer.AddEntry( 121, 50.0f, 0.2f ); // Chrome
					break;
			}

			uint FenceBound = Probabilizer.ComputeProbabilities( 1.0f );

			// Random Seed for that particular sector.
			SaltyRandomGen.Reset();
			random_seed[0] = Sector_x;
			random_seed[1] = Sector_z;
			random_seed[2] = Sector_y;
			random_seed[3] = 0;

			// Layers of ground.

			for( y = 0, Voxel_y = ( Sector_y << VoxelSector.ZVOXELBLOCSHIFT_Y ) - HeightOffset; y < VoxelSector.ZVOXELBLOCSIZE_Y; y++, Voxel_y++ )
			{
				Type = 0;
				if( Voxel_y >= 0 ) Type = 0;
				else { Type = 10; VoxelSector.Flag_Void_Regular = false; }

				TypeTable[y] = Type;

				//TypeTable[y]= 0; // debug

				MineralInclude[y] = ( ( Voxel_y < -5L ) && ( Type != 0 ) );
			}

			// If sector is void, fill it more quickly
			if( VoxelSector.Flag_Void_Regular )
			{
				for( i = 0; i < ( VoxelSector.ZVOXELBLOCSIZE_X * VoxelSector.ZVOXELBLOCSIZE_Y * VoxelSector.ZVOXELBLOCSIZE_Z ); i++ ) Data[i] = 0;
				return;
			}

			// Fill zone with inclusions

			ushort LastMineral = 0;
			uint Num = 0;

			for( i = 0; i < ( VoxelSector.ZVOXELBLOCSIZE_X * VoxelSector.ZVOXELBLOCSIZE_Y * VoxelSector.ZVOXELBLOCSIZE_Z ); i++ )
			{
				Data[i] = TypeTable[i & VoxelSector.ZVOXELBLOCMASK_Y];
				if( MineralInclude[i & VoxelSector.ZVOXELBLOCMASK_Y] )
				{
					if( Probabilizer.IsBelowFence( SaltyRandomGen ) )
					{
						Num = Probabilizer.GetTypeNum( SaltyRandomGen );
						Data[i] = LastMineral = Probabilizer.GetVoxelType( Num );
					}
					else if( LastMineral != 0 )
					{
						if( Probabilizer.AllowRepeat( Num, SaltyRandomGen ) ) Data[i] = LastMineral;
						else LastMineral = 0;
					}
					// LastMineral = 0;
				}
			}
		}

		void GenerateZone_DustField( VoxelSector VoxelSector, int Sector_x, int Sector_y, int Sector_z )
		{
			ushort[] Data;

			SaltyRandomGen.Reset();
			random_seed[0] = Sector_x;
			random_seed[1] = Sector_z;
			random_seed[2] = Sector_y;
			random_seed[3] = 0;
			int n;

			n = 0;
			Data = VoxelSector.Data.Data;
			for( n = 0; n < VoxelSector.ZVOXELBLOCSIZE_X * VoxelSector.ZVOXELBLOCSIZE_Y * VoxelSector.ZVOXELBLOCSIZE_Z; n++ )
			{
				Data[n++] = ( SaltyRandomGen.GetEntropy( 10, true ) < 100 ) ? (ushort)0 : (ushort)203; // 255
			}

		}

		void GenerateZone_Generic_MappedTerrain( VoxelSector VoxelSector, ushort TerrainVoxelType, GenericCharCanvas TerrainMap, int Offset )
		{
			int x, y, z, Voxel_y, Deep;
			int Sector_y;
			ushort VoxelType;
			int height;
			ZVector3L ZonePos;



			int ZoneSize = TerrainMap.Width; // Must also change it in the function giving the Zone Height.
			int ZoneMaxIndex = ZoneSize - 1;

			Sector_y = VoxelSector.Pos_y;
			ZonePos.x = ( ( VoxelSector.Pos_x << VoxelSector.ZVOXELBLOCSHIFT_X ) + Offset ) & ZoneMaxIndex;
			ZonePos.z = ( ( VoxelSector.Pos_z << VoxelSector.ZVOXELBLOCSHIFT_Z ) + Offset ) & ZoneMaxIndex;
			ZonePos.y = ( VoxelSector.Pos_y << VoxelSector.ZVOXELBLOCSHIFT_Y );

			for( z = 0; z < VoxelSector.ZVOXELBLOCSIZE_Z; z++ )
				for( x = 0; x < VoxelSector.ZVOXELBLOCSIZE_X; x++ )
				{

					height = TerrainMap.GetPoint_Fast( ZoneMaxIndex - ( ZonePos.x + x ), ZonePos.z + z );

					for( y = 0, Voxel_y = Sector_y << VoxelSector.ZVOXELBLOCSHIFT_Y; y < VoxelSector.ZVOXELBLOCSIZE_Y; y++, Voxel_y++ )
					{
						Deep = Voxel_y - height;
						VoxelType = 0;

						if( Deep >= 0 ) VoxelType = 0;
						else VoxelType = TerrainVoxelType; //54;

						VoxelSector.SetCube( x, y, z, VoxelType );
					}
				}
		}

		void Generate_Generic_LittleStructs( VoxelSector Sector, VoxelSector ObjectToPlace, GenericCharCanvas LocationMap, int Offset )
		{
			int x, z, xs, ys, zs, GenerationRadius;
			//ZLightSpeedRandom Random;
			VoxelGfx_Tree TreeMaker = new VoxelGfx_Tree();
			//int Seed;
			ushort ZoneType = 0;
			// uint RandNum;


			xs = Sector.Pos_x << VoxelSector.ZVOXELBLOCSHIFT_X;
			ys = Sector.Pos_y << VoxelSector.ZVOXELBLOCSHIFT_Y;
			zs = Sector.Pos_z << VoxelSector.ZVOXELBLOCSHIFT_Z;
			//Seed = xs + 3524*ys + 234 * zs;

			/*
			  Sector.SetCube(0,20,0, 2);
			  Sector.SetCube(15,20,15, 2);
			  return;
			*/

			uint SizeMask;

			SizeMask = (uint)( LocationMap.Width - 1 );
			GenerationRadius = 5;

			for( x = xs - GenerationRadius; x < ( xs + 16 + GenerationRadius ); x++ )
				for( z = zs - GenerationRadius; z < ( zs + 16 + GenerationRadius ); z++ )
				{
					//if ((RandNum = Random.GetNumber( abs(x) + ( abs(z) << 8 ) )) < (4194304 * 50)) // 6
					// if ( (((x & 7) == 0) && ((z & 7) == 0)) )

					if( LocationMap.GetPoint_Fast( (int)( SizeMask - ( ( x + Offset ) & SizeMask ) ), (int)( ( z + Offset ) & SizeMask ) ) > 128 )
					{

						ZVector3L Position;
						ZVector3L OffsetRec;

						Position.x = x - xs;
						Position.z = z - zs;
						Position.y = GetZoneHeight( x, z, out ZoneType ) - ys;

						OffsetRec.x = Position.x;
						OffsetRec.y = Position.y;
						OffsetRec.z = Position.z;

						OffsetRec.x -= T3dTemplate_1.Handle_x;
						OffsetRec.y -= T3dTemplate_1.Handle_y;
						OffsetRec.z -= T3dTemplate_1.Handle_z;

						if( OffsetRec.y < 74 && OffsetRec.y > -10 )
						{
							// if ( (x== (75-512)) && (z==(103-512)) ) MANUAL_BREAKPOINT;
							// if (this.Canva_4.GetPoint_Secure(xs & 0xFF,zs & 0xFF))
							Sector.BlitSector( ObjectToPlace, ref OffsetRec );
						}
					}
				}
		}

		void Generate_Generic_PlaceVoxel( VoxelSector Sector, ushort VoxelType, GenericCharCanvas LocationMap, int Offset, int RelativeHeight, bool SetActiveSector )
		{
			int x, z, xs, ys, zs, GenerationRadius;
			SaltyRandomGenerator Random = new SaltyRandomGenerator();
			//int Seed;
			ushort ZoneType = 0;
			// uint RandNum, Ratio;


			xs = Sector.Pos_x << VoxelSector.ZVOXELBLOCSHIFT_X;
			ys = Sector.Pos_y << VoxelSector.ZVOXELBLOCSHIFT_Y;
			zs = Sector.Pos_z << VoxelSector.ZVOXELBLOCSHIFT_Z;
			//Seed = xs + 3524*ys + 234 * zs;

			uint SizeMask;
			SizeMask = (uint)( LocationMap.Width - 1 );

			GenerationRadius = 0;

			for( x = xs - GenerationRadius; x < ( xs + 16 + GenerationRadius ); x++ )
				for( z = zs - GenerationRadius; z < ( zs + 16 + GenerationRadius ); z++ )
				{
					// if ((RandNum = Random.GetNumber( abs(x) + ( abs(z) << 8 ) )) < (Ratio)) // 6
					// if ( (((x & 31) == 0) && ((z & 31) == 0)) )
					if( LocationMap.GetPoint_Fast( (int)( SizeMask - ( ( x + Offset ) & SizeMask ) ), (int)( ( z + Offset ) & SizeMask ) ) > 128 )
					{
						ZVector3L Position;

						Position.x = x - xs;
						Position.z = z - zs;
						Position.y = ( GetZoneHeight( x, z, out ZoneType ) - ys ) + RelativeHeight;

						if( Position.y < 64 && Position.y > 0 )
						{
							Sector.SetCube( Position.x, Position.y, Position.z, VoxelType );
							if( SetActiveSector ) Sector.Flag_IsActiveVoxels = true;
						}

					}
				}
		}



		void GenerateAddBombs( VoxelSector Sector, double Probability, ushort VoxelType, bool SetActiveSector )
		{
			int x, z, xs, ys, zs, GenerationRadius;
			SaltyRandomGenerator Random = new SaltyRandomGenerator();
			//int Seed;
			ushort ZoneType = 0;
			uint RandNum, Ratio;


			xs = Sector.Pos_x << VoxelSector.ZVOXELBLOCSHIFT_X;
			ys = Sector.Pos_y << VoxelSector.ZVOXELBLOCSHIFT_Y;
			zs = Sector.Pos_z << VoxelSector.ZVOXELBLOCSHIFT_Z;
			//Seed = xs + 3524*ys + 234 * zs;

			Ratio = (uint)( 1024 * Probability );

			GenerationRadius = 0;
			Random.Reset();
			random_seed[0] = xs;
			random_seed[1] = ys;
			random_seed[2] = zs;
			random_seed[3] = 0;

			for( x = xs - GenerationRadius; x < ( xs + 16 + GenerationRadius ); x++ )
				for( z = zs - GenerationRadius; z < ( zs + 16 + GenerationRadius ); z++ )
				{
					if( ( RandNum = (uint)SaltyRandomGen.GetEntropy( 10, false ) ) < ( Ratio ) ) // 6
																								 // if ( (((x & 31) == 0) && ((z & 31) == 0)) )
																								 // if ( Canva_4.GetPoint_Fast( x & 255, z & 255 ) != 0)
					{
						ZVector3L Position;

						Position.x = x - xs;
						Position.z = z - zs;
						Position.y = ( GetZoneHeight( x, z, out ZoneType ) - ys );

						if( Position.y < 64 && Position.y > 0 )
						{
							Sector.SetCube( Position.x, Position.y, Position.z, VoxelType );
							if( SetActiveSector ) Sector.Flag_IsActiveVoxels = true;
						}


					}
				}
		}

		void GenerateRTFM( VoxelSector Sector )
		{
			if( Sector.Pos_x == 0 && Sector.Pos_y == 0 && Sector.Pos_z == 2 )
			{
				Sector.SetCube_WithExtension( 1, 0, 8, 212, null );
			}
		}


		void Debug_Out_Zonemap()
		{
			/*
			int x,y;

			for (y=0;y<32;y++)
			{
			  for (x=0;x<32;x++)
			  {
				if (HeightMap[x][y] >=0 && HeightMap[x][y] <=9) printf("%d",(uint)(HeightMap[x][y]) );
				else printf("%c",HeightMap[x][y] + 55);
			  }
			  printf("\n");
			}
			*/
		}

		public bool LoadTemplateImages( VoxelTypeManager voxelTypeManager )
		{
			this.voxelTypeManager = voxelTypeManager;
			string MiscDirectory, FileName;
			MiscDirectory = VoxelGlobalSettings.COMPILEOPTION_DATAFILESPATH + "/Misc";

			FileName = MiscDirectory + "/tmplt_1.dat";
			if( ( Template_1 = new Bitmap( FileName ) ) == null ) return false;
			Canva_1.SetSize( 256, 256 );
			Canva_1.GetFromBitmap( Template_1 );

			FileName = MiscDirectory + "/tmplt_2.dat";
			if( ( Template_2 = new Bitmap( FileName ) ) == null ) return false;
			Canva_2.SetSize( 256, 256 );
			Canva_2.GetFromBitmap( Template_2 );

			FileName = MiscDirectory + "/tmplt_3_1.dat";
			if( ( Template_3_1 = new Bitmap( FileName ) ) == null ) return false;
			Canva_3_1.SetSize( 1024, 1024 );
			Canva_3_1.GetFromBitmap( Template_3_1 );

			FileName = MiscDirectory + "/tmplt_3_2.dat";
			if( ( Template_3_2 = new Bitmap( FileName ) ) == null ) return false;
			Canva_3_2.SetSize( 1024, 1024 );
			Canva_3_2.GetFromBitmap( Template_3_2, true, 1 ); // r=2 b=0 g=1

			FileName = MiscDirectory + "/tmplt_3_3.dat";
			if( ( Template_3_3 = new Bitmap( FileName ) ) == null ) return false;
			Canva_3_3.SetSize( 1024, 1024 );
			Canva_3_3.GetFromBitmap( Template_3_3, true, 0 );

			FileName = MiscDirectory + "/sect_1.dat";
			T3dTemplate_1.SetNotStandardSize();
			T3dTemplate_1.SetVoxelTypeManager( voxelTypeManager );
			T3dTemplate_1.Load( 0, FileName );

			FileName = MiscDirectory + "/sect_2.dat";
			T3dTemplate_2.SetNotStandardSize();
			T3dTemplate_2.SetVoxelTypeManager( voxelTypeManager );
			T3dTemplate_2.Load( 0, FileName );

			FileName = MiscDirectory + "/Vegetation_1.dat";
			Template_Vegetation_1.SetNotStandardSize();
			Template_Vegetation_1.SetVoxelTypeManager( voxelTypeManager );
			Template_Vegetation_1.Load( 0, FileName );
			Template_Vegetation_1.Subst( 32767 + 2, 234 );
			//Template_Vegetation_1.Subst(71, 32767+21);

			FileName = MiscDirectory + "/Vegetation_2.dat";
			Template_Vegetation_2.SetNotStandardSize();
			Template_Vegetation_2.SetVoxelTypeManager( voxelTypeManager );
			Template_Vegetation_2.Load( 0, FileName );
			Template_Vegetation_2.Subst( 1, 234 );
			Template_Vegetation_2.Subst( 2, 71 );

			FileName = MiscDirectory + "/Vegetation_3.dat";
			Template_Vegetation_3.SetNotStandardSize();
			Template_Vegetation_3.SetVoxelTypeManager( voxelTypeManager );
			Template_Vegetation_3.Load( 0, FileName );
			Template_Vegetation_3.Subst( 1, 234 );
			Template_Vegetation_3.Subst( 2, 71 );


			TreeTable[0] = Template_Vegetation_1;
			TreeTable[1] = Template_Vegetation_2;
			TreeTable[2] = Template_Vegetation_3;

			return ( true );
		}



		void Generate_Terrain_1537( VoxelSector VoxelSector, int HeightOffset, int Sector_x, int Sector_y, int Sector_z )
		{
			int x, y, z, nx, ny, nz;
			ushort VoxelType;
			VoxelSector.Flag_NeedSortedRendering = true;

			/*
			  Textures[0] = 1; // 1
			  Textures[1] = 2; // 12
			  Textures[2] = 3; // 14
			*/
			int sx = ( ( Sector_x + 8192 ) << VoxelSector.ZVOXELBLOCSHIFT_X );
			int sy = ( ( Sector_y + 8192 ) << VoxelSector.ZVOXELBLOCSHIFT_Y );
			int sz = ( ( Sector_z + 8192 ) << VoxelSector.ZVOXELBLOCSHIFT_Z );

			for( z = 0; z < VoxelSector.ZVOXELBLOCSIZE_Z; z++ )
				for( x = 0; x < VoxelSector.ZVOXELBLOCSIZE_X; x++ )
					for( y = 0; y < VoxelSector.ZVOXELBLOCSIZE_Y; y++ )
					{
						nx = sx + x;
						ny = sy + y;
						nz = sz + z;

						double Den = //sin(nx/(50.0+nx/10000.0)) * sin(ny/(50.0+ny/10000.0)) * sin(nz/(50.0+nz/10000.0)) *
									 Math.Sin( nx / ( 30.0 ) ) * Math.Sin( ny / ( 30.0 ) ) * Math.Sin( nz / ( 30.0 ) )
								 /*(1.0 + 0.6 * (sin(nx/(1.3)) * sin(ny/(2.8)) * sin(nz/(1.63)))) */
								 * ( 1.0 + 0.4 * ( ( (double)RandomGen.GetNumber( (uint)( ( nx >> 2 ) + ( ny >> 2 ) + ( nz >> 2 ) ) ) ) / 4294967296.0 ) );
						if( Den > 0.3 ) { VoxelType = 233; if( Den > 0.35 ) VoxelType = 232; }
						else VoxelType = 0;
						VoxelSector.SetCube( x, y, z, VoxelType );
					}
		}

		void Generate_Terrain_1538( VoxelSector VoxelSector, int HeightOffset, int Sector_x, int Sector_y, int Sector_z )
		{
			int x, y, z, nx, ny, nz;
			ushort VoxelType;
			float dns, cns, reduce, Coef1, Coef2, Coef3;
			uint Rx, Ry, Rz;
			float[] P = new float[8], C = new float[8];
			VoxelSector.Flag_NeedSortedRendering = true;

			ushort[] Textures = new ushort[16];
			Textures[0] = 232; // 1
			Textures[1] = 233; // 12
			Textures[2] = 233; // 14
							   /*
								 Textures[0] = 1; // 1
								 Textures[1] = 2; // 12
								 Textures[2] = 3; // 14
							   */
			int sx = ( ( Sector_x + 8192 ) << VoxelSector.ZVOXELBLOCSHIFT_X );
			int sy = ( ( Sector_y + 8192 ) << VoxelSector.ZVOXELBLOCSHIFT_Y );
			int sz = ( ( Sector_z + 8192 ) << VoxelSector.ZVOXELBLOCSHIFT_Z );

			for( z = 0; z < VoxelSector.ZVOXELBLOCSIZE_Z; z++ )
				for( x = 0; x < VoxelSector.ZVOXELBLOCSIZE_X; x++ )
					for( y = 0; y < VoxelSector.ZVOXELBLOCSIZE_Y; y++ )
					{
						nx = sx + x;
						ny = sy + y;
						nz = sz + z;

						Rx = (uint)( sx + x ) >> VoxelSector.ZVOXELBLOCSHIFT_X; Ry = (uint)( sy + y ) >> VoxelSector.ZVOXELBLOCSHIFT_Y; Rz = (uint)( sz + z ) >> VoxelSector.ZVOXELBLOCSHIFT_Z;
						P[0] = ( RandomGen.GetNumber( Rx ) + RandomGen.GetNumber( Ry ) + RandomGen.GetNumber( Rz ) ) % 30;
						P[1] = ( RandomGen.GetNumber( Rx + 1 ) + RandomGen.GetNumber( Ry ) + RandomGen.GetNumber( Rz ) ) % 30;
						P[2] = ( RandomGen.GetNumber( Rx ) + RandomGen.GetNumber( Ry ) + RandomGen.GetNumber( Rz + 1 ) ) % 30;
						P[3] = ( RandomGen.GetNumber( Rx + 1 ) + RandomGen.GetNumber( Ry ) + RandomGen.GetNumber( Rz + 1 ) ) % 30;
						P[4] = ( RandomGen.GetNumber( Rx ) + RandomGen.GetNumber( Ry + 1 ) + RandomGen.GetNumber( Rz ) ) % 30;
						P[5] = ( RandomGen.GetNumber( Rx + 1 ) + RandomGen.GetNumber( Ry + 1 ) + RandomGen.GetNumber( Rz ) ) % 30;
						P[6] = ( RandomGen.GetNumber( Rx ) + RandomGen.GetNumber( Ry + 1 ) + RandomGen.GetNumber( Rz + 1 ) ) % 30;
						P[7] = ( RandomGen.GetNumber( Rx + 1 ) + RandomGen.GetNumber( Ry + 1 ) + RandomGen.GetNumber( Rz + 1 ) ) % 30;
						Coef1 = ( ( sx + x ) % 16 ) * ( 1.0f / 16.0f );
						Coef3 = ( ( sy + y ) % 16 ) * ( 1.0f / 16.0f );
						Coef2 = ( ( sz + z ) % 16 ) * ( 1.0f / 16.0f );
						dns = Interpolation_3d( P, Coef1, Coef2, Coef3 );

						Ry = (uint)( sy + y + 1 ) >> VoxelSector.ZVOXELBLOCSHIFT_Y;
						C[0] = ( RandomGen.GetNumber( Rx ) + RandomGen.GetNumber( Ry ) + RandomGen.GetNumber( Rz ) ) % 30;
						C[1] = ( RandomGen.GetNumber( Rx + 1 ) + RandomGen.GetNumber( Ry ) + RandomGen.GetNumber( Rz ) ) % 30;
						C[2] = ( RandomGen.GetNumber( Rx ) + RandomGen.GetNumber( Ry ) + RandomGen.GetNumber( Rz + 1 ) ) % 30;
						C[3] = ( RandomGen.GetNumber( Rx + 1 ) + RandomGen.GetNumber( Ry ) + RandomGen.GetNumber( Rz + 1 ) ) % 30;
						C[4] = ( RandomGen.GetNumber( Rx ) + RandomGen.GetNumber( Ry + 1 ) + RandomGen.GetNumber( Rz ) ) % 30;
						C[5] = ( RandomGen.GetNumber( Rx + 1 ) + RandomGen.GetNumber( Ry + 1 ) + RandomGen.GetNumber( Rz ) ) % 30;
						C[6] = ( RandomGen.GetNumber( Rx ) + RandomGen.GetNumber( Ry + 1 ) + RandomGen.GetNumber( Rz + 1 ) ) % 30;
						C[7] = ( RandomGen.GetNumber( Rx + 1 ) + RandomGen.GetNumber( Ry + 1 ) + RandomGen.GetNumber( Rz + 1 ) ) % 30;

						Coef3 = ( ( sy + y + 1 ) % 16 ) * ( 1.0f / 16.0f );
						cns = Interpolation_3d( C, Coef1, Coef2, Coef3 );

						VoxelType = Textures[(uint)( ( cns / 20.0 ) )];

						// AspÃ©ritÃ©s.

						dns *= (float)( 1.0 + 0.4 * ( Math.Sin( nx / ( 1.3 ) ) * Math.Sin( ny / ( 2.8 ) ) * Math.Sin( nz / ( 1.63 ) ) ) );
						cns *= (float)( 1.0 + 0.4 * ( Math.Sin( nx / ( 1.3 ) ) * Math.Sin( ny / ( 2.8 ) ) * Math.Sin( nz / ( 1.63 ) ) ) );
						// VoxelType = 32768;
						reduce = (float)( ( (double)( sy + y + ( -524288 + 20 ) - HeightOffset ) ) / 10.0 ); // 5.0
						if( reduce < 0.0 ) reduce = 0;
						dns -= reduce;
						cns -= reduce;
						if( dns < 15.0 ) { dns = 0; VoxelType = 0; } //15.0
						else
						{
							if( ( dns - cns ) > 0.3 ) VoxelType = Textures[0];
							else if( dns - cns < -0.2 ) VoxelType = Textures[2];
							else { VoxelType = Textures[1]; if( ( RandomGen.GetNumber( (uint)nx ) + RandomGen.GetNumber( (uint)ny ) + RandomGen.GetNumber( (uint)nz ) ) < 10000000 ) VoxelType = 46; }
						}

						// if (Sector_y > 1) VoxelType = 0;
						VoxelSector.SetCube( x, y, z, VoxelType );
					}
		}
	}
}
